<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>noteoverflow</title>
    <link href="https://noteoverflow.github.io/atom.xml" rel="self"/>
    <link href="https:&#x2F;&#x2F;noteoverflow.github.io"/>
    <updated>2025-08-31T19:18:39+0000</updated>
    <id>https:&#x2F;&#x2F;noteoverflow.github.io</id>

    
    
    
    
        
        <entry>
            <title>About me</title>
            <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;about&#x2F;"/>
            <updated>2019-11-27T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;about&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;about&amp;#x2F;.&amp;#x2F;icons8-best-terraria-48.png&amp;quot; alt=&amp;quot;avatar&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Hello, this is &amp;lt;em&amp;gt;noteoverflow&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;sup class=&amp;quot;footnote-reference&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#1&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;sup&amp;gt;.
I&amp;#x27;m&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;a &amp;lt;strong&amp;gt;programmer&amp;lt;&amp;#x2F;strong&amp;gt; writing &amp;lt;em&amp;gt;Rust&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;C&amp;#x2F;C++&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;Java&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;Go&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;Haskell&amp;lt;&amp;#x2F;em&amp;gt;.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;a &amp;lt;strong&amp;gt;researcher&amp;lt;&amp;#x2F;strong&amp;gt; studying &amp;lt;em&amp;gt;Zero-Shot Learning(ZSL)&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;Programming Language Theory(PLT)&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;noteoverflow&amp;quot;&amp;gt;Github&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;https:&amp;#x2F;&amp;#x2F;count.getloli.com&amp;#x2F;@noteoverflow-counter&amp;quot; alt=&amp;quot;noteoverflow-counter&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;div class=&amp;quot;footnote-definition&amp;quot; id=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;sup class=&amp;quot;footnote-definition-label&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;sup&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Ex falso quodlibet&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Test</title>
            <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;test&#x2F;"/>
            <updated>2000-01-01T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;test&#x2F;</id>
            <content type="html">&amp;lt;h2 id=&amp;quot;fan-ti-zhong-wen-ce-shi&amp;quot;&amp;gt;繁体中文测试&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This is a chinese test post to show you how chinese is displayed.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;善我王上魚、產生資西員合兒臉趣論。畫衣生這著爸毛親可時，安程幾？合學作。觀經而作建。都非子作這！法如言子你關！手師也。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;以也座論頭室業放。要車時地變此親不老高小是統習直麼調未，行年香一？&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;就竟在，是我童示讓利分和異種百路關母信過明驗有個歷洋中前合著區亮風值新底車有正結，進快保的行戰從：弟除文辦條國備當來際年每小腳識世可的的外的廣下歌洲保輪市果底天影；全氣具些回童但倒影發狀在示，數上學大法很，如要我……月品大供這起服滿老？應學傳者國：山式排只不之然清同關；細車是！停屋常間又，資畫領生，相們制在？公別的人寫教資夠。資再我我！只臉夫藝量不路政吃息緊回力之；兒足灣電空時局我怎初安。意今一子區首者微陸現際安除發連由子由而走學體區園我車當會，經時取頭，嚴了新科同？很夫營動通打，出和導一樂，查旅他。坐是收外子發物北看蘭戰坐車身做可來。道就學務。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;國新故。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;这群在连云港过冬的蛎鹬本来依赖两个因放水而露出底部的鱼塘作为高潮栖息地，但是前段时间鱼塘又开始蓄水，让它们失去了合适的高潮地，潮水上涨时候只能像这样挤在鱼塘边的土质堤坝上，休息环境更差而且容易受人惊扰，实在是很可怜&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;ri-ben-yu-tesuto&amp;quot;&amp;gt;日本語テスト&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This is a Japanese test post to show you how japanese is displayed.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;私は昨日ついにその助力家というのの上よりするたなけれ。 最も今をお話団はちょうどこの前後なかろでくらいに困りがいるたをは帰着考えたなかって、そうにもするでうたらない。 がたを知っないはずも同時に九月をいよいよたありた。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;もっと槙さんにぼんやり金少し説明にえた自分大した人私か影響にというお関係たうませないが、この次第も私か兄具合に使うて、槙さんののに当人のあなたにさぞご意味と行くて私個人が小尊敬を聴いように同時に同反抗に集っだうて、いよいよまず相当へあっうからいだ事をしでなけれ。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;それでそれでもご時日をしはずはたったいやと突き抜けるますて、その元がは行ったてという獄を尽すていけですた。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;jian-ti-zhong-wen-ce-shi&amp;quot;&amp;gt;简体中文测试&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;效育声去本义然空，各值太法心想，场强实地。 题铁习点儿表管少间千，只何政亲织文意部，千影画派证男须。 手反取长风治增非等直难群，连取及天他己事头级，影数弦适把气快目人。 专议以省通引而千个，格则口段度样水热马，地教少务改磨。 包思外心半院应她算斯，市外会快记路又火学，劳如肃它准众丧边。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;团算部住县单总边素格军所，合音府教看和广光采率位转，位用品根确针百。 证其标元角工方海接交他，论象切万世认一响义，治然身本风弦带题。 向我次路持加北，她不反心。 说总元军例市决，现始即算证养，规走还壳。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;h2&amp;quot;&amp;gt;H2&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;h3&amp;quot;&amp;gt;H3&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;1&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;2&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;h2 id=&amp;quot;font&amp;quot;&amp;gt;font&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;testing: &amp;lt;code&amp;gt;code&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;testing: &amp;lt;em&amp;gt;italic&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;testing: &amp;lt;strong&amp;gt;bold&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;mathjax&amp;quot;&amp;gt;mathjax&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;\( \int x dx = \frac{x^2}{2} + C \)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;\[ \mu = \frac{1}{N} \sum_{i=0} x_i \]&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;katex&amp;quot;&amp;gt;katex&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;testing: inline formula: $\int_a^b f(x) dx = F(b) - F(a)$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;testing: block formula: $$f g = g f g$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
\int_0^1x^4 \sqrt{\frac {1+x} {1-x}}dx
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
\lim f(x) - g(x) = g(x) (\frac {f} {g} - 1)
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;code&amp;quot;&amp;gt;code&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;c&amp;quot;&amp;gt;C++&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;pre data-lang=&amp;quot;cpp&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-cpp &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-cpp&amp;quot; data-lang=&amp;quot;cpp&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;#include&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; __FILE__
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;template &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;typename&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; T, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;class&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; C, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; R&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;using &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;T = C&amp;amp;lt;R&amp;amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;static inline register void &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;main&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(){
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;auto&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; f = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;main&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;long&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;void&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;*) &amp;amp;amp;f;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(a);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;rust&amp;quot;&amp;gt;Rust&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c str
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;where
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() &amp;amp;lt; b.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        b
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;haskell&amp;quot;&amp;gt;Haskell&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;pre data-lang=&amp;quot;haskell&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-haskell &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-haskell&amp;quot; data-lang=&amp;quot;haskell&amp;quot;&amp;gt;&amp;lt;span&amp;gt;primes = filterPrime [&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;..] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;where
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    filterPrime (p:xs) =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        p : filterPrime [x | x &amp;amp;lt;- xs, x &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;mod&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; p &amp;#x2F;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
        </entry>
        
    
    
    
        
        
            
            <entry>
                <title>哲学思考</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;theory-of-concepts&#x2F;"/>
                <updated>2025-08-15T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;theory-of-concepts&#x2F;</id>
                <content type="html">&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;no-title&amp;quot;&amp;gt;无心&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;concepts-i&amp;quot;&amp;gt;概念的玄理 其一&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;selfness&amp;quot;&amp;gt;自性的普遍性&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Math learning</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;resources-of-learning-math&#x2F;"/>
                <updated>2025-06-20T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;resources-of-learning-math&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Some books I like:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;linear-algebra&amp;quot;&amp;gt;Linear algebra&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.math.brown.edu&amp;#x2F;streil&amp;#x2F;papers&amp;#x2F;LADW&amp;#x2F;LADW.html&amp;quot;&amp;gt;Linear algebra done Wrong&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;linear.axler.net&amp;#x2F;&amp;quot;&amp;gt;Linear algebra done Right&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;abstract-algebra&amp;quot;&amp;gt;Abstract algebra&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Algebra-Chapter-Graduate-Studies-Mathematics&amp;#x2F;dp&amp;#x2F;0821847813&amp;quot;&amp;gt;Algebra: Chapter 0&amp;lt;&amp;#x2F;a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Absolutely the best!&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Book-Abstract-Algebra-Second-Mathematics&amp;#x2F;dp&amp;#x2F;0486474178&amp;quot;&amp;gt;A book of abstract algebra&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;functional-analysis&amp;quot;&amp;gt;Functional analysis&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Functional-Analysis-Introduction-Hilbert-Algebras&amp;#x2F;dp&amp;#x2F;3319067273&amp;quot;&amp;gt;Functional Analysis: An Introduction to Metric Spaces, Hilbert Spaces, and Banach Algebras&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;category-theory&amp;quot;&amp;gt;Category theory&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Joy-Abstraction-Exploration-Category-Theory&amp;#x2F;dp&amp;#x2F;1108477224&amp;quot;&amp;gt;The joy of abstraction&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Category-Theory-Context-Aurora-Originals&amp;#x2F;dp&amp;#x2F;048680903X&amp;quot;&amp;gt;Category Theory in Context&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Categories-Working-Mathematician-Graduate-Mathematics&amp;#x2F;dp&amp;#x2F;1441931236&amp;quot;&amp;gt;Category theory for the working mathematician&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;Category-Theory-Programmers-Bartosz-Milewski&amp;#x2F;dp&amp;#x2F;0464243874&amp;quot;&amp;gt;Category theory for programmers&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;topology&amp;quot;&amp;gt;Topology&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.topologywithouttears.net&amp;#x2F;&amp;quot;&amp;gt;Topology without tears&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;deep-learning&amp;quot;&amp;gt;Deep Learning&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;udlbook.github.io&amp;#x2F;udlbook&amp;#x2F;&amp;quot;&amp;gt;Understanding deep learning&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Algorithm tricks</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;algorithm-tricks&#x2F;"/>
                <updated>2025-04-06T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;algorithm-tricks&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Study notes on algorithm tricks.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;catamorphism-as-prototype-algo&amp;quot;&amp;gt;Catamorphism as prototype of recursive algorithms&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>外语学习与思考</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;linguistics&#x2F;"/>
                <updated>2025-04-06T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;pinned&#x2F;linguistics&#x2F;</id>
                <content type="html">&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;snap-grammar&amp;quot;&amp;gt;SNAP：一种超轻量英语语法框架&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;light-weight-english-syntax&amp;quot;&amp;gt;基于「修饰」和「省略」的轻量级英语语法系统&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
    
        
        
            
            <entry>
                <title>自性的普遍性</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;selfness&#x2F;"/>
                <updated>2025-08-30T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;selfness&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;从记事起，我有了「自我」的概念，或者说我因为有了自我的概念而生出了对事物的各种感受，其中有欣喜，可欣喜背后也带来了恐惧。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;吾所以有大患者，为吾有身，及吾无身，吾有何患？&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;「身」似意念中的自我，其不具备普遍性，因为他只属于我，是「我」对「自我」和「外界」的区分，有了「自我」亦有「无我」。
因为有了这个概念，将外物生灭的法则作用于自身，引发恐惧心。恐惧心本无惧，是人类的自然反应，是自然的一部分，却因为「自我」，无时无刻不陷于由「恐惧」而照见的「自我」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;偶得所谓「心流」的状态，心中欣喜其中感受，感觉无上快乐，过程中似乎忘记了根深蒂固已久的「自我」，只有念头和想法在自然流动。
可这也进一步加剧了「无我」，同时也加剧了「自我」，所谓有无相生，越是想要「无我」，越是深入「自我」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;有无之相生，难易之相成，长短之相形，高下之相盈，音声之相和，先后之相随。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;dui-zi-wo-de-zhui-xun&amp;quot;&amp;gt;对「自我」的追寻&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;西方哲学中有个经常被提及的问题：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;我是谁？&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;我曾经无法停止思考这个问题，究竟何为自我？当我抛去外物，抛去金钱、身份，可那仍然不是真正的自我。
于是我尝试透过爱好、情绪、思想，进入心的深处去寻找，可是当我剥离一切，却什么也没有找到。
可是我仍然坚信人生寻求自我的成长是重要的课题，于是我寄希望于投入到具体的现实生活中，也许自我就在其中。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;dui-zi-xin-de-zhui-xun&amp;quot;&amp;gt;对「自信」的追寻&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;有了「自我」，于是生出了「自信」心。
自孩童时，生出「自我」，生出「自卑」心，于是内心焦虑，不断寻求认可与自身能力的提升来获得「自信」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;可是愈加追寻，越是发现「自信」和外界无关，其无关乎能力、评价，仅仅是一种对自我积极的看法。
可是，我没有意识到，真正的自信恰是消去「自信」和「自卑」的概念，因为他们同出于一体，如果希望自身保持自信，就必然会陷入自卑。
自卑和自信经常同时出现，且容易陷入两端。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;dui-wu-wo-de-zhui-xun&amp;quot;&amp;gt;对「无我」的追寻&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;经历让我察觉「无我」的妙处，可是「无我」恰似新的「自我」。
「自我」让我建立与外界和他人的界限，「无我」让我体会到自然的妙处与流动。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;任何概念的「有无」都是自然、道、自性的一种体现与变化，可概念无法真正描述概念之上的东西，概念的有无之母。
可见如若用语言谈「自信」，就会发现真正的自信无需「自信」。
若用语言谈「自我」，就会发现真正的自我恰似「无我」。
若用语言谈「自我」有无之上的存在，就会发现语言无法描述其存在。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;道可道，非常道；名可名，非常名。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;为了「可道」，我将其称为「自性」，其无处不在，人人具有。
「自性」有「空」的特征，却绝非念头的「空」，如若观之，可见概念与想法的来去自如，
亦见所有的概念与念头皆与此相连，又消失于此，诸相非相，却又诸相亦相，诸相生灭。&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>概念的玄理 其一</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;concepts-i&#x2F;"/>
                <updated>2025-08-12T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;concepts-i&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;如果说概念和逻辑的世界是人脑的一种能力，那么这份能力便与人是否生存并无直接联系；
虽不可否认，人的其他部分的认知和感受塑造了人脑对世界的认知，但这塑造背后的机制与原理应当是独立的。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;因而对于人脑所形成的概念，有几点公理：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;所有概念都是人脑的想象，并非实际的存在，因为「实际的存在」也不过是一种人类大型幻想世界的一种共识。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;不要把语言描述的任何东西当作真理，如果真的存在真理，那一定不存在于个体的人脑；&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;概念的有和无需同等地对待，甚至有时更应当关注概念的「无」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;概念的「无」并非忘记，而是蕴含着非常丰富的后果；想像一个充满了联系和因果的世界，突然失去了某个重要概念，那么不仅是概念本身的消失，其相关的联系和因果才是真正的影响。因此，我们不应当只关注事物的一面，走向一面的同时，也走向了另一面，不应忽视另一面的威力。
这一点十分重要，这关乎人如何看待自身的存在与生死。
更广泛地讲：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;在有无的基础上，概念还有双生的特性，例如好坏、得失与善恶。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;要明白，当下的得利也可能收到失去的反噬，善行背后也有恶的潜伏。要警惕所有的偏执，看到事物倾向的同时，也看到相反的「势」，
看似坏的结局也许蕴含着巨大的机遇。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;始终记得概念只是一种想象和功能，人无需受其束缚，自由即 一念之间的来去自如。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;根据这点，要谨记，上述所有公理都也只是一些概念，不应当让这些概念影响，只是手脚架和梯子，不要沉溺于此，一切有为法，无非梦幻泡影。&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>SNAP：一种超轻量英语语法框架</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;snap-grammar&#x2F;"/>
                <updated>2025-07-20T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;snap-grammar&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;之前我希望建立一个更轻量化的英语语法系统帮助学习者快速建立直觉：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;light-weight-english-syntax&amp;quot;&amp;gt;基于「修饰」和「省略」的轻量级英语语法系统&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;今天我尝试将这一套方式系统化并整理成了&amp;lt;strong&amp;gt;SNAP&amp;lt;&amp;#x2F;strong&amp;gt;框架，该框架有三个核心拼图：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;修饰&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;省略&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;概率&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;接下来将逐个进行阐述。
在阐述前，再次重申：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;本语法框架是为了语言的使用服务，仅为粗略描述，在熟练之后即可忘记本框架。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;我没有时间，我没有时间，只能粗略写写&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;h1 id=&amp;quot;xiu-shi&amp;quot;&amp;gt;修饰&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;p&amp;gt;何谓修饰？修饰即一种特殊的「关系」而已，所谓关系，结构为：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
x \rightarrow y
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这里表示$x$修饰$y$。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;举几个例子。比如常见的句子构成「主谓」结构：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Tom likes learning math.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;此处 &amp;quot;&amp;lt;em&amp;gt;likes learning math&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 作为谓语修饰主语 &amp;quot;&amp;lt;em&amp;gt;Tom&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; ，而 &amp;quot;&amp;lt;em&amp;gt;learning math&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 又用来修饰 &amp;quot;&amp;lt;em&amp;gt;likes&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 来补全 &amp;quot;&amp;lt;em&amp;gt;likes&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 的内容。
形容词，副词等传统语法中的分类的修饰关系更加显然。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;snap&amp;quot;&amp;gt;SNAP&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;接下来我们进入SNAP的核心，即根据修饰关系的结构进行粗略的分类。我们可以把修饰的结构按照其是否自我修饰和修饰语序分为如下：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;名称&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;结构&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;说明&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;em&amp;gt;N&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;$x \rightarrow x$&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;自修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;em&amp;gt;A&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;$x \rightarrow$&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;前置他修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;em&amp;gt;P&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;$\rightarrow x$&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;后置他修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;我们来举几个例子。
比如名词或名词短语均为&amp;lt;em&amp;gt;N&amp;lt;&amp;#x2F;em&amp;gt;，所有形容词类均可作为&amp;lt;em&amp;gt;A&amp;lt;&amp;#x2F;em&amp;gt;，而&amp;lt;em&amp;gt;P&amp;lt;&amp;#x2F;em&amp;gt;十分复杂，我们需要专门来讨论他。
&amp;lt;em&amp;gt;P&amp;lt;&amp;#x2F;em&amp;gt;在传统语法中可以有如下几种可能：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;verb obj.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;linking-verb complement&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;adv.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;clause&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;obj.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;具体而言，前两种是句子谓语的构成方式，即「动词+宾语」和「系动词+补语」。
后三种分别为「副词」、「从句」和「宾语」（没错，宾语可以看作修饰前面的动词！）。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;有了这些概念我们就可以定义什么是句子，也就是SNAP中的&amp;lt;em&amp;gt;S&amp;lt;&amp;#x2F;em&amp;gt;。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;句子（S）即 使用&amp;lt;em&amp;gt;N&amp;lt;&amp;#x2F;em&amp;gt;开头，并使用上述前两种&amp;lt;em&amp;gt;P&amp;lt;&amp;#x2F;em&amp;gt;作为开头的后置修饰的结构。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;这么一来，从句也就顺理成章的可以被识别了。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;zhuan-huan&amp;quot;&amp;gt;转换&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;在英语中，一个词的分类不是固定的（或者，如果你喜欢类型论，可以认为同一个词可以在不同类型之间被影射）。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;分类不是由词本身决定，而是由其在句子中的结构和身份来决定。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;建立了这种观念之后，我们就可以分类讨论不同的转换：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;snap-grammar&amp;#x2F;snap-convertion.png&amp;quot; width=300&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;center&amp;gt;
&amp;lt;h3 id=&amp;quot;napzhuan-huan&amp;quot;&amp;gt;NAP转换&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;首先我们关注 NAP 这三剑客。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;n-rightarrow-a&amp;quot;&amp;gt;$N \rightarrow A$&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;「自修饰体」可以转换为「前置他修饰体」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这十分常见，比如 &amp;quot;&amp;lt;em&amp;gt;book shelf&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 其中 &amp;lt;em&amp;gt;book&amp;lt;&amp;#x2F;em&amp;gt; 本是自修饰的名词，此处却被作为前置修饰用来修饰 &amp;lt;em&amp;gt;shelf&amp;lt;&amp;#x2F;em&amp;gt;。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;n-rightarrow-p&amp;quot;&amp;gt;$N \rightarrow P$&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;「自修饰体」可以转换为「后置修饰体」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这也非常常见，主要有以下两大情况：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;作为宾语修饰动作：比如 &amp;quot;&amp;lt;em&amp;gt;play piano&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 中 &amp;lt;em&amp;gt;piano&amp;lt;&amp;#x2F;em&amp;gt; 后置修饰 &amp;lt;em&amp;gt;play&amp;lt;&amp;#x2F;em&amp;gt;;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;加上系动词作为谓语：比如 &amp;quot;&amp;lt;em&amp;gt;He is Tom&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot; 中 &amp;lt;em&amp;gt;Tom&amp;lt;&amp;#x2F;em&amp;gt; 加上 &amp;lt;em&amp;gt;is&amp;lt;&amp;#x2F;em&amp;gt; 即可后置修饰 &amp;lt;em&amp;gt;He&amp;lt;&amp;#x2F;em&amp;gt;;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h4 id=&amp;quot;p-rightarrow-n&amp;quot;&amp;gt;$P \rightarrow N$&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;「后置修饰体」可转换为「自修饰体」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;比如动名词和动名词短语。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;a-rightarrow-p&amp;quot;&amp;gt;$A \rightarrow P$&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;「前置修饰体」可转换为「后置修饰体」&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;比如通过增加系动词转换为谓语。
有比如宾语补语、同位语等。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;p-rightarrow-a&amp;quot;&amp;gt;$P \rightarrow A$&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;部分&amp;lt;&amp;#x2F;strong&amp;gt;「后置修饰体」可转换为「前置修饰体」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;注意这里仅是&amp;lt;em&amp;gt;部分&amp;lt;&amp;#x2F;em&amp;gt;可转换。
比如部分简单动词可以通过「动状词」转换为形容词。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;s-zhuan-huan&amp;quot;&amp;gt;S 转换&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;S 可以被转换为 NP 其一，其实就是传统语法中的各种从句。
这里由于时间原因不再赘述，仅进行如下梳理：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;结构&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;说明&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$S \rightarrow N$&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;名词性从句&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$S \rightarrow P$&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;定语从句，关系从句&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h2 id=&amp;quot;bu-gui-ze-xiu-shi&amp;quot;&amp;gt;不规则修饰&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;除了上述根据语序可大致划分的修饰之外，其实还有不规则的修饰方式。
根据「时态」和「语气」可以对动词进行各种变形，这些均属于不规则修饰（即同时前置，后置，还有可能是不规则变化）。
这类需要专门处理。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;h1 id=&amp;quot;sheng-lue&amp;quot;&amp;gt;省略&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;p&amp;gt;接下来进入第二块拼图：「省略」。
省略是一种十分强大的工具，省略的通则是：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;省略从句中的主语与系动词，只留补语。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;可是如果从句中没有系动词和补语怎么办？没关系，我们还有下面两条补充规则：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;you-zhu-dong-ci-shi-bian-cheng-bu-ding-ci&amp;quot;&amp;gt;有助动词时，变成不定词&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;You must go at once.&amp;lt;br &amp;#x2F;&amp;gt;
→ You are to go at once. （你必须马上离开。）&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The train will leave in 10 minutes.&amp;lt;br &amp;#x2F;&amp;gt;
→ The train is to leave in 10 minutes. （火车 10 分钟后开动。）&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;He should do as I say.&amp;lt;br &amp;#x2F;&amp;gt;
→ He is to do as I say. （他该按我说的去做。）&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You may call me &amp;quot;Sir.&amp;quot;&amp;lt;br &amp;#x2F;&amp;gt;
→ You are to call me &amp;quot;Sir.&amp;quot; （你可以叫我“先生”。）&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;wu-zhu-dong-ci-shi-bian-cheng-v-ing&amp;quot;&amp;gt;无助动词时，变成V-ing&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;h1 id=&amp;quot;gai-lu&amp;quot;&amp;gt;概率&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;p&amp;gt;以上使用「修饰」和「省略」的语法系统是十分粗略的，现实世界中有许多特殊情况和惯用法，需要在日常使用中去习惯和积累，这里推荐一本书：
&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.amazon.com&amp;#x2F;English-Grammar-Use-Book-Answers&amp;#x2F;dp&amp;#x2F;1108457657&amp;quot;&amp;gt;English Grammar in use&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;snap-grammar&amp;#x2F;english-grammar-in-use.jpg&amp;quot; width=300&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;center&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>此中有真意</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;distractions&#x2F;"/>
                <updated>2025-07-14T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;distractions&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;记得《赌博默示录》中曾经有一个片段，开司在进行一次生死难料的赌局之时，有了一个大胆的猜想也许能赢。
可这毕竟是场赌局，输了便会万劫不复。这时开司突然明白了一件事，原来重要的是自己内心的声音，他人的声音，自己的畏惧与对失败的焦虑，突然消失了。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;distractions&amp;#x2F;kaisi.jpg&amp;quot; width=600&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;center&amp;gt;
&amp;lt;p&amp;gt;当时我没有细想，只觉得也许是开司信念上更坚定了，今天我突然发现其中还藏着更有趣的东西。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;近来很多事情不顺，一度陷入焦虑，不知不觉对外界与自身都充满了迷茫。
在经历了许许多多的痛苦、失眠与神经紊乱之后，我突然感到了原来这一切都是我自身，或是称其为&amp;lt;em&amp;gt;潜意识&amp;lt;&amp;#x2F;em&amp;gt;，在向我传达某种想法与愿望。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这让我突然想起了很久之前看过的一部漫画《汤神君没有朋友》。
其中有一段故事，男主汤神的朋友藤泽被他人说和汤神性格相似，
而汤神在学校中有名的不受待见，便有些难过，但仔细想来，还真觉得自己也许和汤神有些相似。
工作上对周围的同事不认真工作不满，对身边同学不认真做好事情而生气，对自己无力掌控外在而怀疑自己，对自己不能心胸宽广而批评自我，进而对自己的未来产生焦虑。
当藤泽偶然间跟汤神提起觉得自己和和他相似时，没想到汤神毫不留情地说自己和她完全不同，他从来不烦恼和焦虑这些事情。
藤泽十分惊讶，问汤神为什么，汤神说他发现：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;众多烦恼的根源在于不明白自身的愿望，不知道自己的想法。正因为不知道自己的愿望，而过多地把自己的精神能量分散到了外界被消耗掉。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;汤神说完，藤泽突然感到原来自己的愿望并不在这些事情上，烦恼和焦虑也顿时不再在意。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;distractions&amp;#x2F;tangshen.jpg&amp;quot; width=300&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;center&amp;gt;
&amp;lt;p&amp;gt;我觉得故事不止于此。我突然感到大家常说的「摒弃杂念」和「专心致志」不过是一种外在的、事后的评价和总结，并非真正的内因。
而内因，或者说「&amp;lt;strong&amp;gt;真正的愿望&amp;lt;&amp;#x2F;strong&amp;gt;」，又或者简言之「&amp;lt;strong&amp;gt;真意&amp;lt;&amp;#x2F;strong&amp;gt;」其实就在「&amp;lt;strong&amp;gt;杂念&amp;lt;&amp;#x2F;strong&amp;gt;」之中。之所以痛苦、焦虑、折磨，其实是自身在向自身传达「真意」与「愿望」。
若能正视自己的愿望，进而在这一过程中不断认识自己，认识周围的环境与联系，便会感到精神力原来是充实的。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;换言之，正视自己的想法、杂念和愿望，察觉到其中的真意，便会发现原来当真是&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;菩提本无树，何处惹尘埃&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;所有的困难、失意此刻都开始熠熠生辉，人生进而感到神清气爽，不再患得患失。
对事物看法的改变背后，其内因是对自己所行之道的由内而外的享受与坚定，热爱自己与道路上的风景。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;distractions&amp;#x2F;self-attention.jpg&amp;quot;&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;center&amp;gt;</content>
            </entry>
            
        
            
            <entry>
                <title>Another view of Rust&#x27;s lifetime II - The algorithm</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;another-view-of-rust-s-lifetime-ii-the-algorithm&#x2F;"/>
                <updated>2025-06-01T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;another-view-of-rust-s-lifetime-ii-the-algorithm&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Previously, I described another view of Rust&amp;#x27;s lifetime which is dual to the traditional one in&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;#x2F;posts&amp;#x2F;another-view-of-rusts-lifetime&amp;quot;&amp;gt;Another view of Rust&amp;#x27;s lifetime&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Today, let&amp;#x27;s try to make it a concrete algorithm demo based on &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;rust-lang.github.io&amp;#x2F;polonius&amp;#x2F;&amp;quot;&amp;gt;Polonius&amp;lt;&amp;#x2F;a&amp;gt;.
To formally and clearly describe the core rules of the algorithm, I want to use a special DSL which is drived from Datalog:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;meta-language&amp;quot;&amp;gt;Meta-language&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The lanugage we use to describe rules has only 2 basic components:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;atomic-entity&amp;quot;&amp;gt;Atomic entity&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;If a entity derives itself, we call it atomic entity (usually they are the input of the algorithm). For instance:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;reachable (a : A) (b : B)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We can also view this entity as a type:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;reachable : A -&amp;amp;gt; B -&amp;amp;gt; Input
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We use a spectial kind &amp;lt;code&amp;gt;Input&amp;lt;&amp;#x2F;code&amp;gt; to imply that the entity is atomic.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;derived-entity&amp;quot;&amp;gt;Derived entity&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;This kind of entities can be derived from others (even recursively!):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;path : P -&amp;amp;gt; P -&amp;amp;gt; Type
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;trans : path a b -&amp;amp;gt; path b c -&amp;amp;gt; path a c
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Here &amp;lt;code&amp;gt;trans&amp;lt;&amp;#x2F;code&amp;gt; serves as a deriving rule.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;materials&amp;quot;&amp;gt;Materials&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Before demonstrating the whole algorithm, we firstly prepare some materials to cook.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;g-the-cfg&amp;quot;&amp;gt;$G$ the CFG&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;As in the traditional algorithm, we need the Control Flow Graph(CFG), denoted $G$, to help us trace program and memory flow.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The CFG comprises set of MIR Point, denoted $P$ and control flow edges between points $E$.
To get the source and destination of one edge, we have two functions:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;source : E -&amp;amp;gt; P
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;dest : E -&amp;amp;gt; P
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Since we are working on the meta-language, we say edge &amp;lt;code&amp;gt;e&amp;lt;&amp;#x2F;code&amp;gt; exists by:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;edge : (source e) -&amp;amp;gt; (dest e) -&amp;amp;gt; Input
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Normally, we denote one edge as &amp;lt;code&amp;gt;edge a b&amp;lt;&amp;#x2F;code&amp;gt; by its end points.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;r-the-regions&amp;quot;&amp;gt;$R$ the Regions&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Region is the core concept of the borrow checker.
Then what do we mean by a &amp;lt;strong&amp;gt;region&amp;lt;&amp;#x2F;strong&amp;gt;?
Let&amp;#x27;s consider how to assemble references and memory locations in Rust!
Basically, we use product type, or, if you like, &amp;lt;code&amp;gt;struct&amp;lt;&amp;#x2F;code&amp;gt;s:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Region&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; A,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; B,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Similarly, We just define regions as products of references.
However, as we want to be more specific here, we call referred references &amp;lt;strong&amp;gt;loans&amp;lt;&amp;#x2F;strong&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Regions are sets of loans.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Moreover, since regions can be viewed as sets, we then have subset relations which is explored in the next section.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;l-the-loans&amp;quot;&amp;gt;$L$ the Loans&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;In the previous part, we used loans to define regions.
Loans can be viewed as any borrow sites.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;For example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; x = vec![&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;];
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; p: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a i32 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;random&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;amp;x[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; Loan L0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;} &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;amp;x[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; Loan L1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Here, the region &amp;#x27;a would correspond to the set {L0, L1}, since it may refer to data produced by the loan L0, but it may also refer to data from the loan L1.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;relations&amp;quot;&amp;gt;Relations&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;injection&amp;quot;&amp;gt;Injection&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;We mentioned that regions can form subset relations.
But we can say more general here by defining relation structures between regions at the same point.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;in : P -&amp;amp;gt; R -&amp;amp;gt; R -&amp;amp;gt; Type
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;To simplify the notation a little, we denote &amp;lt;code&amp;gt;a in b at p&amp;lt;&amp;#x2F;code&amp;gt; just as &amp;lt;code&amp;gt;in p a b&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;trans       : a in b at p -&amp;amp;gt; b in c at p -&amp;amp;gt; a in c at p
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;follow_edge : a in b at p -&amp;amp;gt; edge p q -&amp;amp;gt; a in b at q
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Also, we have some input injection relations:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;base_in : P -&amp;amp;gt; R -&amp;amp;gt; R -&amp;amp;gt; Input
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;and one more rule:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;atom : base_in p a b -&amp;amp;gt; a in b at p
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;liveness&amp;quot;&amp;gt;Liveness&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;a region &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; is live at some point P if some reference with type &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;a i32&amp;lt;&amp;#x2F;code&amp;gt; may be dereferenced later:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;region_live_at : R -&amp;amp;gt; P -&amp;amp;gt; Input
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We also talk about liveness of loans:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;loan_live_at : L -&amp;amp;gt; P -&amp;amp;gt; Type
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;derive_loan_live : region_live_at r p -&amp;amp;gt; require r l p -&amp;amp;gt; loan_live_at l p
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;What&amp;#x27;s &amp;lt;code&amp;gt;require&amp;lt;&amp;#x2F;code&amp;gt; here?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;requirement&amp;quot;&amp;gt;Requirement&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;require R L P&amp;lt;&amp;#x2F;code&amp;gt; means:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;If the terms of the loan L are violated at the point P, then the region R is invalidated.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Formally:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;require : R -&amp;amp;gt; L -&amp;amp;gt; P -&amp;amp;gt; Type
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;and rules:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;from_loan     : loan r l p -&amp;amp;gt; require r l p
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;follow_subset : require r&amp;amp;#39; l p -&amp;amp;gt; r&amp;amp;#39; in r at p -&amp;amp;gt; require r l p
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;follow_cfg    : require r l p -&amp;amp;gt; edge p q -&amp;amp;gt; require r l q
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;invalidation&amp;quot;&amp;gt;Invalidation&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;And now finally we can define what a borrow check error is.
Before that, We need to define an input invalidates(P, L),
which indicates that some access or action at the point P invalidates the terms of the loan L:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;invalidate : P -&amp;amp;gt; L -&amp;amp;gt; Input
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;errors&amp;quot;&amp;gt;Errors&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Finally&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;error : P -&amp;amp;gt; Type
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;detect_error : exists l. invalidate p l -&amp;amp;gt; loan_live_at l p -&amp;amp;gt; error p 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;refinement&amp;quot;&amp;gt;Refinement&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The core algorithm is rather coarse.
We need refinements to handle reassignment and reborrow problems.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;reassignment&amp;quot;&amp;gt;Reassignment&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;h3 id=&amp;quot;reborrow&amp;quot;&amp;gt;Reborrow&amp;lt;&amp;#x2F;h3&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>无心</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;no-title&#x2F;"/>
                <updated>2025-04-24T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;no-title&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;欲专心，觉杂念，欲除之，于是观止。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;惚不知所止，不知专心为何，无我，无外，无欲，无惧，无法门，无所至也。&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Catamorphism as prototype of recursive algorithms</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;catamorphism-as-prototype-algo&#x2F;"/>
                <updated>2025-04-06T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;catamorphism-as-prototype-algo&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;WARNING: This is just a informal post on algorithms and most of ideas are only checked on leetcode problems.&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Actually I was trying to find some universal methods for solutions on algorithm problems.
However, since I only have time to practise on leetcode problems and don&amp;#x27;t have time to explore in a much broader range like ACM, I hereby only demonstrate my discoveries during solving about 500 problems on leetcode:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;For most basic algorithms, no need to master various kinds of tricks and data structures.
All these problems can be solved with one simple principal.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;You may be suspective.
But you can just think that currently, nearly all algorithms of branches and loops are basically equivalent to those of lambda calculus with recursions. Any traditional algorithm which can be finished in finite steps can also be expressed with lambda calculus and recursions. In a nutshell, lambda calculus is turing complete!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;h2 id=&amp;quot;the-ultimate-principal&amp;quot;&amp;gt;The ultimate principal&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Wait! Our mission should be positing a uniform principal of problem solving.
Why bother wasting time on lambda calculus and recursions?
Now let me show you the magic! It can be described informally as:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;All problems can be deconstructed by its &amp;lt;strong&amp;gt;input, output and side-effect&amp;lt;&amp;#x2F;strong&amp;gt;.
We can recursively divide the problem until we can solve it trivially.
Finally, we merge all recursive solutions and get the global solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Actually, there&amp;#x27;s nothing novel here. This principal is just trying to reintroduce one archaic motto:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;All algorithms can be constructed by &amp;lt;strong&amp;gt;divide and conquer&amp;lt;&amp;#x2F;strong&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;The only difference is that the archaic principal said nothing about what to divide.
Although this principal is so simple that it&amp;#x27;s even hard to be seen as a discovery, to actually use it, it&amp;#x27;s much much hard and there exists so many pitfalls.
Most pitfalls are basically that, most materials and people failed to follow the principal， let alone finding tricks of it. Here I only enumerate some of crux tricks (someday I may write a systemaic book on this).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;tricks&amp;quot;&amp;gt;Tricks&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;recursion-as-loops&amp;quot;&amp;gt;Recursion as loops&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;All recursions can be converted to equivalent version of loops with extra data structure(such as &amp;lt;em&amp;gt;stack)&amp;lt;&amp;#x2F;em&amp;gt;.
In fact, all stack based compilers do this for you automatically.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;input disabled=&amp;quot;&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;#x2F;&amp;gt;
show one perticular example&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h3 id=&amp;quot;not-only-input-but-also-output&amp;quot;&amp;gt;Not only input, but also output!&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;One common misunderstanding is problems can only be divided by input.
In practice, dividing output is quite useful and ubiquitous.
Whenever you have difficulty dividing on input, just try output!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;All information (data) representing part of the problem can be divided.
Although different dividing startegies can lead to different complexities.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h3 id=&amp;quot;recursion-on-side-effect&amp;quot;&amp;gt;Recursion on side effect&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Many people insist that many problems can not be solve by &amp;lt;em&amp;gt;divide and conquer&amp;lt;&amp;#x2F;em&amp;gt; as the dividing is not local and cannot be merged into the global solution. However, they all ignored some very critical aspect: the side-effect of functions (algorithms).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In theory, side-effect should be anything that can influence referential transparency.
The most interesting fact is that, if you think carefully, effects can be classified into compile-time and run-time.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;run-time-effect-extra-information&amp;quot;&amp;gt;Run-time effect: extra information&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;For a problem, the result of our recursion is not simply returning a local solution in most scenarios. I find that we usually need additional recursive information. This is a bit abstract, so let me give you an example, using the sliding window that we often see:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Sliding windows are typically described by divide and conquer:
for an input list, decompose it into a list consisting of the last element and all the previous elements.
Assuming that I have obtained the solution of all the previous elements (except the last element) through recursion, then we will find that the solution of the first half alone is not enough to support us to get a new solution after incorporating the last element.
So we can simply include an additional information, that is, assume that the recursion of the first half can return us an additional information,
this additional information contains some information about the sequence adjacent to the last element (in fact, this sequence is what many people call a sliding window).
Using this additional information, we find that we can easily update the global solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Of course, don&amp;#x27;t forget that this extra information is recursive. When you require the first half to recursively return the extra information, you must also be able to return the updated extra information (which can be compared to the sliding update of a sliding window). Similarly, if you want to get extra information you want from the upper layer, make sure you can then provide it to the next layer. Although the sliding window is used as an example here, the application scope of the extra information technique is actually much more than that. You will find that monotone stacks, double pointers, prefix sums, etc. are all just special cases of extra information recursion.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;compile-time-effect-constraints-and-proofs&amp;quot;&amp;gt;Compile-time effect: constraints and proofs&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;Compile-time effects are rare to mention but also ubiquitous!
Besides decomposing on run-time data, you can even divide constraints (proofs)!
If you are familiar with &amp;lt;em&amp;gt;dependent type theory&amp;lt;&amp;#x2F;em&amp;gt;, then this is much natural.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;divide-one-aspect-at-a-time-never-both&amp;quot;&amp;gt;Divide one aspect at a time, never both&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;So you start trying to decompose any data that you think might be useful, but remember never to consider decomposition in multiple dimensions.
Instead, decompose the first data (dimension) first, and then consider whether to decompose the second dimension. Otherwise, you will definitely fall into chaos.
The most typical example is high-dimensional dynamic optimization.
For this kind of problem, you must not rush to decompose it all at once, as you cannot eat hot tofu in a hurry.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;defer-dividing&amp;quot;&amp;gt;Defer dividing&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Actually, most problems tagged &amp;lt;code&amp;gt;easy&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;medium&amp;lt;&amp;#x2F;code&amp;gt; can be divided directly by its input and output.
The real hard part is lying under the target to be divided.
For instance, in designing the famous &amp;lt;em&amp;gt;quick sort&amp;lt;&amp;#x2F;em&amp;gt;, one learns to rearrange the target array before dividing and recursion. the rearrange can effecttively efface the cost of merging after the recursion which is inevitable in &amp;lt;code&amp;gt;merge sort&amp;lt;&amp;#x2F;code&amp;gt;.
Moreover, many hard problems do not directly divide on input or output, nor the given effects.
To solve them, one need to design and find a way to effectively construct a new data structure to be divided and recur.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;reuse-space&amp;quot;&amp;gt;Reuse space&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;When you try to design additional information again, you may find that the memory used to store the additional information can be reused. In this case, you must try to reuse this memory, which can usually greatly reduce space complexity.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;caching&amp;quot;&amp;gt;Caching&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Don&amp;#x27;t be afraid of dynamic programming.
Just list the recursive formula of recursive divide and conquer, and then use a hashMap to cache the results.
If you find that there is no circular dependency in the recursion, then you don&amp;#x27;t even need a hash.
A simple array plus the space reuse mentioned above can solve all dynamic programming.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;pruning&amp;quot;&amp;gt;Pruning&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Subproblems can be pruned. Greedy algorithms and early termination with backtracking are both trivially applicable.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;catamorphisms-and-recursion-schemes&amp;quot;&amp;gt;Catamorphisms and recursion schemes&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;f-algebra&amp;quot;&amp;gt;F-algebra&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;input disabled=&amp;quot;&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;#x2F;&amp;gt;
complete formal description after&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h3 id=&amp;quot;basic-cata&amp;quot;&amp;gt;Basic cata&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;catamorphism&amp;#x2F;catamorphism.png&amp;quot; alt=&amp;quot;cata&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The dividing-and-conquer part can be described by &amp;lt;em&amp;gt;catamorphism&amp;lt;&amp;#x2F;em&amp;gt;.
However, in many situations, one need to find a effective target data structure to be divided first which is the real enigma. I shall do more studies on this part.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Fix point combinator in Rust</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;fixpoint-combinator-in-rust&#x2F;"/>
                <updated>2025-04-03T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;fixpoint-combinator-in-rust&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;It has been many years since Haskell discovered the &amp;lt;em&amp;gt;Y&amp;lt;&amp;#x2F;em&amp;gt; combinator(fix point combinator).
It&amp;#x27;s such a milestone that it makes &amp;lt;em&amp;gt;lambda calculus&amp;lt;&amp;#x2F;em&amp;gt; turing complete.
Let&amp;#x27;s try to implement it in Rust and have fun!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;fix-point-of-a-function&amp;quot;&amp;gt;Fix point of a function&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;What do we mean by &amp;quot;fix point&amp;quot;?
Well, in fact, it&amp;#x27;s quite simple. A &amp;lt;em&amp;gt;fix point&amp;lt;&amp;#x2F;em&amp;gt; of a function $f$ is a parameter $x$ with the following equation:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
f(x) = x
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This does not seem to be fun...
But if we try to flip the equation, it&amp;#x27;s quite interesting:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
x = f(x) = f(f(x)) = f(f(f(x))) = f^n(x)
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If we can find a fix point, then we have recursion and loops for free!
Now suppose we want to build a magic wand Y, for any function $f$, whenever we apply the wand to $f$,
we automaically get the fix point of $f$, that is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
Y(f) = f(Y(f))
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$Y(f)$ becomes the fix point of function $f$!
But does this magic wand exist? Haskell said &amp;lt;em&amp;gt;YES&amp;lt;&amp;#x2F;em&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;fixpoint-combinator-in-rust&amp;#x2F;y-combinator-mit.png&amp;quot; width=400&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
figure 1
&amp;lt;&amp;#x2F;center&amp;gt;
&amp;lt;h2 id=&amp;quot;self-as-parameter&amp;quot;&amp;gt;&amp;lt;em&amp;gt;Self&amp;lt;&amp;#x2F;em&amp;gt; as parameter&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Before we actually find the magic wand, let&amp;#x27;s first try to consider another question:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;[!NOTE] QUESTION
Can we write recursions using pure lambda expressions without name binding?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;For example, if one want to write a recursive factorial function:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fact&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;n&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        n * &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fact&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(n - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;If we cannot use name binding, then we cannot use name &amp;lt;code&amp;gt;fact&amp;lt;&amp;#x2F;code&amp;gt; inside function definition of &amp;lt;code&amp;gt;fact&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fact&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;n&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        n * todo!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;how???&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Well, since we cannot directly bind the name, let&amp;#x27;s try to pass a function as it self:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fact&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;dyn Fn(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;n&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        n * &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(n - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;But the problem still remains. How do we pass the parameter &amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;repeating-self&amp;quot;&amp;gt;Repeating &amp;lt;code&amp;gt;self&amp;lt;&amp;#x2F;code&amp;gt;?&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;In method above we have no way of passing the function of itself &amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;.
But we may imitate the function call itself:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fact&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;this&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;dyn Fn(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;todo&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;!(&amp;amp;quot;?&amp;amp;quot;), &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, n: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        n * &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;this&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(this, n - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;No way out. If we are in dynamic typed languages then we are done.
But in static typed language like &amp;lt;em&amp;gt;rust&amp;lt;&amp;#x2F;em&amp;gt;, we cannot express the type of &amp;lt;code&amp;gt;this&amp;lt;&amp;#x2F;code&amp;gt;.
To see why, consider expand the type of &amp;lt;code&amp;gt;this&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span&amp;gt;this: &amp;amp;amp;dyn Fn(&amp;amp;amp;dyn Fn(todo!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;?&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;), &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;this: &amp;amp;amp;dyn Fn(&amp;amp;amp;dyn Fn(&amp;amp;amp;dyn Fn(todo!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;?&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;), &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We are repeating the type again and again which leads to &amp;lt;em&amp;gt;inifnite type&amp;lt;&amp;#x2F;em&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;o-combinator&amp;quot;&amp;gt;Ω combinator&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Typing is hard. Let&amp;#x27;s for now forget about types and focus on finding the general way to do recursion in dynamic typed languages. We are now convinced that recursion can definitely be implemented without name binding in dynamic typed languages(see &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;fixpoint-combinator-in-rust&amp;#x2F;#repeating-self&amp;quot;&amp;gt;previous section&amp;lt;&amp;#x2F;a&amp;gt;).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Recall the pattern of &amp;lt;code&amp;gt;repeating self&amp;lt;&amp;#x2F;code&amp;gt;, we can pass the function itself into itself:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;λf. f(f)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;which looks weird. But remember in this way we can pass the function itself into &amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;?
Let try to pass it:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;(λf. f(f))(λf. f(f))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;and try to reduce it(replace f in the first lambda with the passed parameter):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;(λf. f(f))(λf. f(f))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;WOW we just get the original expression back!
This kind of combinator is so interesting that we call it the Ω combinator:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
\omega(x) = x(x)
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;omega =&amp;amp;gt; OMG it&amp;#x27;s a recursion without name binding!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;recursive-type&amp;quot;&amp;gt;Recursive type&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Typing is hard.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;We are now getting really close to the real &amp;lt;em&amp;gt;magic wand&amp;lt;&amp;#x2F;em&amp;gt;!
But we still need to fix the &amp;lt;em&amp;gt;infinite type&amp;lt;&amp;#x2F;em&amp;gt; problem.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Remember, whenever you find something not exist, just create it!
Let&amp;#x27;s create the &amp;lt;code&amp;gt;infinite type&amp;lt;&amp;#x2F;code&amp;gt; in rust&amp;#x27;s type system.
The first step of any creation if to try to express it in some way.
Since we cannot directly express the &amp;lt;em&amp;gt;inifinity&amp;lt;&amp;#x2F;em&amp;gt;, we pass the repeating part as parameter:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;λa.e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then we define a new operation &amp;lt;code&amp;gt;unfold&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;unfold (λa.e) = e[(λa.e)&amp;#x2F;a]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;e[a&amp;#x2F;b]&amp;lt;&amp;#x2F;code&amp;gt; means to replace all occurences of &amp;lt;code&amp;gt;b&amp;lt;&amp;#x2F;code&amp;gt; to &amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt;. Therefore we replace all &amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt;s into &amp;lt;code&amp;gt;λa.e&amp;lt;&amp;#x2F;code&amp;gt; it self.
We can infinitely &amp;lt;code&amp;gt;unfold&amp;lt;&amp;#x2F;code&amp;gt; the type as many times as we want.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In theory study, people call this kind of infinite type μ type and replace λ with μ:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;μa.e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;simulate-m-type-in-rust&amp;quot;&amp;gt;Simulate μ type in rust&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s implement μ type in Rust!
Recall the unimplemented type is like:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span&amp;gt;&amp;amp;amp;dyn Fn(todo!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;?&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;), A) -&amp;amp;gt; B
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then we can create the &amp;lt;code&amp;gt;U&amp;lt;&amp;#x2F;code&amp;gt; type:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;U&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, A, B&amp;amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; dyn Fn(U&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, A, B&amp;amp;gt;, A) -&amp;amp;gt; B);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now we have typed Ω combinator:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;A, B&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;U&amp;amp;lt;&amp;amp;#39;_, A, B&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: A) -&amp;amp;gt; B {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    u.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(U(u.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;), a) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; f(f, a)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;y-combinator&amp;quot;&amp;gt;Y combinator&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We&amp;#x27;ve got all prerequisites of our &amp;lt;em&amp;gt;magic wand&amp;lt;&amp;#x2F;em&amp;gt;!
Recall the Y combinator we want has the property:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;Y(f) = f(Y(f))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;To achieve this, we only need to add one &amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt; to the Ω combinator:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;λx. f(x(x))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;and pass this part to itself:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;(λx. f(x(x)))(λx. f(x(x)))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= f((λx. f(x(x)))(λx. f(x(x))))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= f(f((λx. f(x(x)))(λx. f(x(x)))))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= f(f(f((λx. f(x(x)))(λx. f(x(x))))))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Believe it or not, we&amp;#x27;ve created the Y combinator!
Just abstract &amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;λf. (λx. f(x(x)))(λx. f(x(x)))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;strict-or-lazy&amp;quot;&amp;gt;Strict or lazy&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;If you implement the Y combinator above(try it!), you will find that the calculation will &amp;lt;em&amp;gt;stack overflow&amp;lt;&amp;#x2F;em&amp;gt;!
This is because this kind of version only can be applied to &amp;lt;em&amp;gt;lazy evaluated&amp;lt;&amp;#x2F;em&amp;gt; language like &amp;lt;em&amp;gt;Haskell&amp;lt;&amp;#x2F;em&amp;gt;.
If we want to implement it in Rust, we have to choose a &amp;lt;em&amp;gt;strictly evaluated&amp;lt;&amp;#x2F;em&amp;gt; version. Here&amp;#x27;s one:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;λf. (λx. f(λa. x(x, a)))(λx. f(λa. x(x, a)))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Using this we can finally implement the Y combinator in Rust!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;U&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, A, B&amp;amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; dyn Fn(U&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, A, B&amp;amp;gt;, A) -&amp;amp;gt; B);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;A, B&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;u&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;U&amp;amp;lt;&amp;amp;#39;_, A, B&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: A) -&amp;amp;gt; B {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    u.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(U(u.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;), a)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;y&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;A, B&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;impl Fn(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;dyn Fn&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;A&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; B, A) -&amp;amp;gt; B, a: A) -&amp;amp;gt; B {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;U(&amp;amp;amp;|u, a| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;|a| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;u, a), a)), a) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;(λx. f(λa. x(x, a)))(λx. f(λa. x(x, a)))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;usage&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fact &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= |&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;dyn Fn(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            i * &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;y&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;fact, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    assert_eq!(n, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;120&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;application-in-real-world&amp;quot;&amp;gt;Application in real world&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;At first glance, you may assume recursion without name binding is useless.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;[!NOTE] QUESTION
What&amp;#x27;s the point of abstracting recursion this way if we can use name binding directly?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;I used to assume that the Y combinator can only be useful in theory analysis.
But I&amp;#x27;m wrong. The power of fix point arises when we try to abstract general effects!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h4 id=&amp;quot;memorizing-fibbonacci&amp;quot;&amp;gt;Memorizing fibbonacci&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;p&amp;gt;The fibbonacci series has a direct recursion implementation (in rust, for example):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i &amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) + &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;However, since &amp;lt;code&amp;gt;fib&amp;lt;&amp;#x2F;code&amp;gt; is not efficient and has already been a fixed point, we cannot transform it into memorization version(i.e., the state side-effect):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;mfib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() -&amp;amp;gt; impl FnMut(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; cache = HashMap::new();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;move &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;|i| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; cache.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;get&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;i) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        Some(n) =&amp;amp;gt; *n,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        None =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cache.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;insert&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i, n);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;mfib&amp;lt;&amp;#x2F;code&amp;gt; is still $O(2^n)$! If a function has already been fixed as a fix point, we cannot change its complexity!
Therefore there&amp;#x27;s no way we can reuse &amp;lt;code&amp;gt;fib&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Applying the fix point combinator, we can abstract the function itself:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;trait &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Fib {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;F: Fib&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; F, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i &amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        f.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) + f.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i - &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;MemFib {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cache&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: HashMap&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;MemFib {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;new&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            cache: HashMap::new(),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Fib &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;MemFib {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.cache.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;get&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;i) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            Some(n) =&amp;amp;gt; *n,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            None =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, i);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.cache.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;insert&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(i, n);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;test_mfib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; mfib = MemFib::new();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; n = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; mfib, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;50&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    dbg!(n);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now we can safely reuse the &amp;lt;code&amp;gt;fib&amp;lt;&amp;#x2F;code&amp;gt; function and reduce its time complexity to $O(n)$.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Notably, if you still want the original naive pure recursive version of fib, you can still build it as:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;NaiveFib;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Fib &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;NaiveFib {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;fib&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, i)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Finally, the &amp;lt;code&amp;gt;fib&amp;lt;&amp;#x2F;code&amp;gt; function is composable both in pure fix point, but also in other effects!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;f-algebras-and-lambek-s-lemma&amp;quot;&amp;gt;F-Algebras and Lambek&amp;#x27;s lemma&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Have you ever been curious that why recursion has been so useful and unbiquitous?
Or, have you ever been curious that why products and coproducts are so important in both programming and math?
Interestingly, there is strong explanation in category theory!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;f-algebra&amp;quot;&amp;gt;F-Algebra&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Have you ever doubt the definiton of &amp;quot;algebra&amp;quot;?
Mathematicians use the word &amp;quot;algebra&amp;quot; everywhere.
In category theory, we abstract various kinds of algebras as &amp;lt;em&amp;gt;F-Algebra&amp;lt;&amp;#x2F;em&amp;gt;:
$$
F(a) \rightarrow a
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;For example, to represent &amp;lt;em&amp;gt;Monoid m&amp;lt;&amp;#x2F;em&amp;gt;, we need two operations:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;0: m
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;plus: m -&amp;amp;gt; m -&amp;amp;gt; m
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;a + b = plus a b
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then we can define $F(a)$ as:
$$
F(m) = m^1 \times m^{m \times m}
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;fix-point-as-the-initial-object&amp;quot;&amp;gt;Fix point as the initial object&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Now that we have definition of algebras, does this definiton look familiar to you?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Recall the definition of fix point:
$$
f(a) = a
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The definition of F-Algebra only replace the &amp;lt;code&amp;gt;=&amp;lt;&amp;#x2F;code&amp;gt; symbol to arrow!
We can define an operator &amp;lt;code&amp;gt;fix&amp;lt;&amp;#x2F;code&amp;gt; just as μ type:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;type Fix f = Fix (f (Fix f))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then define operators:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;fix: f (Fix f) -&amp;amp;gt; Fix f
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;unfix: Fix f -&amp;amp;gt; f (Fix f)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;You may now ask:
What&amp;#x27;s the point of abstracting fix point this way?
The secret lies in the relations of different kinds of F-algebras!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Suppose you have two F-algebras:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
F(a) \rightarrow a
$$
$$
F(b) \rightarrow b
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Viewing $F(a) \rightarrow a$ as one object, then we can define relations between
$F(a) \rightarrow a$ and $F(b) \rightarrow b$ as:
$$
f: a \rightarrow b
$$
$$
(map\ f): F(a) \rightarrow F(b)
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To better demonstrate the relation, we can use &amp;lt;em&amp;gt;commutative diagram&amp;lt;&amp;#x2F;em&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;fixpoint-combinator-in-rust&amp;#x2F;f-algebra-relation.png&amp;quot; width=400&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
figure 2
&amp;lt;&amp;#x2F;center&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
&amp;lt;p&amp;gt;If this diagram commutes, we say that we have relation $f$ from $F(a) \rightarrow a$ to $F(b) \rightarrow b$.
Various kinds of F-algebras and relations between them forms a category!
Now we ask an interesting question:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;[!NOTE] QUESTION
Does this category have initial object?
By &amp;lt;em&amp;gt;initial object&amp;lt;&amp;#x2F;em&amp;gt;, we mean that, is there an object from which only exists one arrow to any other objects?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;If we have this kind of initial object $F(x) \rightarrow x$, then we can prove that $x$ is a fix point of $F$ and:
$$
F(x) = x
$$
Instead of arrow, this time we have the final equality!
Now we can conclude that recursion is important because it&amp;#x27;s the initial object in the category of algebras!
and initial object implies some universal optimal construct!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you are interested at the proof, try to follow the commutative diagram below!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;fixpoint-combinator-in-rust&amp;#x2F;lambek-lemma.png&amp;quot; width=300&amp;#x2F;&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;
lambek lemma proof
&amp;lt;&amp;#x2F;center&amp;gt;&amp;lt;br&amp;#x2F;&amp;gt;</content>
            </entry>
            
        
            
            <entry>
                <title>The evil of abusing syntax</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;evil-of-abusing-syntax&#x2F;"/>
                <updated>2025-03-31T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;evil-of-abusing-syntax&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;It took me about one week until I realized that I misunderstood the meaning of the expression syntax in the paper.
Operator priorities are rediculous!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s have a look at the formal expression:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
?x:a \rightarrow b.x\ e
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;At first look, my eyes parsed the expression as:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
(?x:a) \rightarrow (b.x) e
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;which is totally WRONG!
The correct grouping is&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;$$
(?x:(a \rightarrow b).x)\ e
$$&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I really appreciate the great work of the author, but&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Please use PARENTHESIS when necessary!&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Linear algebraic effects in Rust</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;linear-algebraic-effect-in-rust&#x2F;"/>
                <updated>2025-03-29T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;linear-algebraic-effect-in-rust&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Recently I successfully implement &amp;lt;em&amp;gt;Linear Algebraic Effect(Linear AE)&amp;lt;&amp;#x2F;em&amp;gt; in Rust!
You may ask, what exactly is &amp;lt;em&amp;gt;Linear AE&amp;lt;&amp;#x2F;em&amp;gt;?
Well, honestly, the word &amp;#x27;linear&amp;#x27; is used by myself to mean &amp;lt;em&amp;gt;one-shot&amp;lt;&amp;#x2F;em&amp;gt;, which implies the effect cannot be cloned casually. &amp;lt;em&amp;gt;AE&amp;lt;&amp;#x2F;em&amp;gt; is a special kind of structure like &amp;quot;exceptions can return&amp;quot;.
I&amp;#x27;m not going to explain &amp;lt;em&amp;gt;AE&amp;lt;&amp;#x2F;em&amp;gt; in detail in this post. Let&amp;#x27;s jump into rust&amp;#x27;s implementation!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-experimental-coroutine-trait&amp;quot;&amp;gt;The experimental &amp;lt;code&amp;gt;Coroutine&amp;lt;&amp;#x2F;code&amp;gt; trait&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Yes rust already has a trait called &amp;lt;code&amp;gt;Coroutine&amp;lt;&amp;#x2F;code&amp;gt; whose definition is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;pub trait &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Coroutine&amp;amp;lt;R = ()&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Yield;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Return;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: Pin&amp;amp;lt;&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut Self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;arg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: R) -&amp;amp;gt; CoroutineState&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Yield, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Return&amp;amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The associated type &amp;lt;code&amp;gt;Coroutine::Yield&amp;lt;&amp;#x2F;code&amp;gt; means the yielded type of the coroutine and the type &amp;lt;code&amp;gt;Coroutine::Return&amp;lt;&amp;#x2F;code&amp;gt; refers to the type of returned value. For example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; generator = #[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;coroutine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] || {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;..&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;10 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The generated coroutine &amp;lt;code&amp;gt;generator&amp;lt;&amp;#x2F;code&amp;gt; acts like a simple iterator which &amp;lt;em&amp;gt;yields&amp;lt;&amp;#x2F;em&amp;gt; integers from 0 to 10.
Therefore the &amp;lt;code&amp;gt;Yield&amp;lt;&amp;#x2F;code&amp;gt; type of &amp;lt;code&amp;gt;generator&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;i32&amp;lt;&amp;#x2F;code&amp;gt; and type &amp;lt;code&amp;gt;Return&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;()&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now let&amp;#x27;s focus on the method &amp;lt;code&amp;gt;Corouine::resume&amp;lt;&amp;#x2F;code&amp;gt;.
&amp;lt;code&amp;gt;resume&amp;lt;&amp;#x2F;code&amp;gt; takes a &amp;lt;em&amp;gt;pinned self&amp;lt;&amp;#x2F;em&amp;gt; since the coroutine itself may contain self-referential pointers just like those in &amp;lt;code&amp;gt;Future&amp;lt;&amp;#x2F;code&amp;gt;. Every time one resume with a parameter, the coroutine returns a &amp;lt;code&amp;gt;CoroutineState&amp;lt;&amp;#x2F;code&amp;gt; to indicate whether it should return or yield. For instance:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; coroutine = #[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;coroutine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] || {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;foo&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Pin::new(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; coroutine).&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(()) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    CoroutineState::Yielded(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) =&amp;amp;gt; {}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    _ =&amp;amp;gt; panic!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;unexpected return from resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Pin::new(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; coroutine).&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(()) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    CoroutineState::Complete(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;foo&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;) =&amp;amp;gt; {}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    _ =&amp;amp;gt; panic!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;unexpected return from resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;yield-as-effects&amp;quot;&amp;gt;&amp;lt;code&amp;gt;Yield&amp;lt;&amp;#x2F;code&amp;gt; as effects&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Since rust&amp;#x27;s compiler can automatically transform our coroutine into a stackless state machine, we can directly utilize it&amp;#x27;s &amp;lt;code&amp;gt;Yield&amp;lt;&amp;#x2F;code&amp;gt; type to implement effects!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Consider a common &amp;lt;em&amp;gt;logging&amp;lt;&amp;#x2F;em&amp;gt; effect, let&amp;#x27;s define it as a common data strucutre:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Log(String);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The we can create a coroutine to yield &amp;lt;code&amp;gt;Log&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; may_log = #[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;coroutine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] |i: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i == &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; Log(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;i == 0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;to_string&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;());
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;If you try to write &amp;lt;code&amp;gt;may_log&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s type, You will find that the &amp;lt;code&amp;gt;Yield&amp;lt;&amp;#x2F;code&amp;gt; type can indicate that, while executing the coroutine, it may yield &amp;lt;em&amp;gt;logging&amp;lt;&amp;#x2F;em&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span&amp;gt;may_log: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;usize &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;-&amp;amp;gt; () yields Log
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Notably, &amp;lt;code&amp;gt;yield&amp;lt;&amp;#x2F;code&amp;gt; is a expression which can return value which will be filled as parameters while resuming.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s abstract this pattern a little.
Firstly, we can model effects as various kinds of data such as&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Effect {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Log(String),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    State(State),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Async,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Injection,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then we write our program logic as a coroutine which yields its requiring effect:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span&amp;gt;#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;coroutine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] |arg: I| -&amp;amp;gt; R {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; Effect::Log(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;to_string&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;());
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; b = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; Effect::State(State::Get);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; Effect::State(State::Set(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;));
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; c = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; Effect::Async,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Finally, we write a data structure to resume the coroutine until it returns.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;composing-effectful-programs&amp;quot;&amp;gt;Composing effectful programs&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We can now create effectful programs. But how can we compose them?
Coroutines are not like normal functions, they will not return until it yields all effects.
If we write:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;coroutine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(arg);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We are expecting &amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt; as the returned result of calling &amp;lt;code&amp;gt;coroutine&amp;lt;&amp;#x2F;code&amp;gt;.
Therefore we need to comsume all its effects:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; pinned = pin!(coroutine);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; arg = arg;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;loop &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res = pinned.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;as_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;().&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(arg);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            CoroutineState::Yielded(eff) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                arg = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; eff;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            CoroutineState::Complete(v) =&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;break&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; v,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This is also a common pattern, so let&amp;#x27;s write a macro:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;macro_rules! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;run {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;expr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$arg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;expr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) =&amp;amp;gt; {{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; pinned = pin!(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; arg = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$arg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;loop &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res = pinned.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;as_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;().&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;resume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(arg);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                CoroutineState::Yielded(eff) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    arg = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;yield&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; eff;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                CoroutineState::Complete(v) =&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;break&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; v,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now we can simply write to compose effectful programs:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = run!(coroutine, arg);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;epilogue&amp;quot;&amp;gt;Epilogue&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This a demo implementation of algebraic effect in Rust.
There is a better version with &amp;lt;em&amp;gt;Handlers&amp;lt;&amp;#x2F;em&amp;gt; in &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;crates.io&amp;#x2F;crates&amp;#x2F;algoroutine&amp;quot;&amp;gt;crates.io&amp;#x2F;algoroutine&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>数码宝贝展览</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;digimon-exhibition&#x2F;"/>
                <updated>2024-12-08T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;digimon-exhibition&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;今天看到了数码宝贝的展览，就顺道去参观了一下；整体办的内容有限（甚至有点简陋，电话亭居然不能用！），不过确实勾起了不少回忆。
似乎基本主要是90年代末左右的人会关注digimon，大概是因为那段时间电视上有播放吧。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;整个展厅是顺着动画的剧情时间轴去布置的，每个展厅代表一个动画的篇章：
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3700.jpg&amp;quot; alt=&amp;quot;halls&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;一开始看到的是成长期的进化画面(巴鲁兽卖萌ing)
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3655.jpg&amp;quot; alt=&amp;quot;growing&amp;quot; &amp;#x2F;&amp;gt;
还记得幼年期第一期进化的场景（虽然在悬崖边掉到了河里）。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;在理解了数码宝贝世界基本的世界观之后，我们的小队很快遇到了恶魔兽。小时候觉得恶魔兽引诱孩子们进别墅的情节非常经典，其中有幅画似乎在暗示&amp;lt;em&amp;gt;天使与恶魔同在&amp;lt;&amp;#x2F;em&amp;gt;。
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3658.jpg&amp;quot; alt=&amp;quot;devil&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;接下来我们就遇到了悟空兽，除了悟空兽的出场BGM之外，我印象最深的还是暴龙兽的错误进化，这也让太一第一次开始思考鲁莽与勇气之间的区别。
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3660.jpg&amp;quot; alt=&amp;quot;skeleton&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;除了恶魔，西方另一个经典的形象就是&amp;lt;em&amp;gt;吸血鬼&amp;lt;&amp;#x2F;em&amp;gt;，所以接下来我们又遇到了吸血魔兽，某种意义上算是恶魔兽的加强版，也是这一段剧情了拓展了数码宝贝的世界观，发现数码世界是与现实世界相连的（这一设定十分超前，其中也深化了动画的主题，引入了家庭、父母、同龄人、虚拟与现实之间的关系探讨）：
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3664.jpg&amp;quot; alt=&amp;quot;vampire&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;可惜没有看到南瓜兽和矿石兽的万圣节之旅，我永远也忘不了这个情节。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;正当我们以为打败吸血魔兽就可以恢复虚拟与现实之间的秩序之时，又出现了黑暗四天王，其中我印象最深的还是小丑皇，最绝望的时刻，只剩下希望：
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3668.jpg&amp;quot; alt=&amp;quot;joker&amp;quot; &amp;#x2F;&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3663.jpg&amp;quot; alt=&amp;quot;angel&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;最后的最后，实际上最终的boss是所有不幸的digimon的怨念，没有人为他们伸张权利，一切都是优胜劣汰的自然法则。到这里，伴着回到现实的列车和butterfly，我和主角小队们一同回到了现实。
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3689.jpg&amp;quot; alt=&amp;quot;back&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;临走的时候，发现还有战斗暴龙兽的雕像
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3699.jpg&amp;quot; alt=&amp;quot;fight&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;最后我买了一个盲盒，居然真的抽中了我编程的启蒙大佬光子郎：
&amp;lt;img src=&amp;quot;&amp;#x2F;img&amp;#x2F;blog&amp;#x2F;digimon-exhibition&amp;#x2F;IMG_3702.jpg&amp;quot; alt=&amp;quot;program&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Bash may swallow signals</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;bash-may-swallow-signals&#x2F;"/>
                <updated>2024-10-26T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;bash-may-swallow-signals&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Recently I encountered a confusing bug:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;A simple &amp;lt;code&amp;gt;eprintln!&amp;lt;&amp;#x2F;code&amp;gt; in Rust may cause panic!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;That sounds weird, right?
Let&amp;#x27;s check the &amp;lt;code&amp;gt;eprintln!&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s doc:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Prints to the standard error, with a newline.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Equivalent to the &amp;lt;a href=&amp;quot;crate::println&amp;quot;&amp;gt;&amp;lt;code&amp;gt;println!&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; macro, except that output goes to
&amp;lt;a href=&amp;quot;crate::io::stderr&amp;quot;&amp;gt;&amp;lt;code&amp;gt;io::stderr&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; instead of &amp;lt;a href=&amp;quot;crate::io::stdout&amp;quot;&amp;gt;&amp;lt;code&amp;gt;io::stdout&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;. See &amp;lt;a href=&amp;quot;crate::println&amp;quot;&amp;gt;&amp;lt;code&amp;gt;println!&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; for
example usage.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Use &amp;lt;code&amp;gt;eprintln!&amp;lt;&amp;#x2F;code&amp;gt; only for error and progress messages. Use &amp;lt;code&amp;gt;println!&amp;lt;&amp;#x2F;code&amp;gt;
instead for the primary output of your program.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;..&amp;#x2F;std&amp;#x2F;fmt&amp;#x2F;index.html&amp;quot;&amp;gt;the formatting documentation in &amp;lt;code&amp;gt;std::fmt&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;
for details of the macro argument syntax.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h1 id=&amp;quot;panics&amp;quot;&amp;gt;Panics&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;p&amp;gt;Panics if writing to &amp;lt;code&amp;gt;io::stderr&amp;lt;&amp;#x2F;code&amp;gt; fails.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Writing to non-blocking stderr can cause an error, which will lead
this macro to panic.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h1 id=&amp;quot;examples&amp;quot;&amp;gt;Examples&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;eprintln!(&amp;amp;quot;Error: Could not complete task&amp;amp;quot;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Therefore, at least we can conclude that print will only panic when the stderr cannot be written, but how?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;redirected-stderr&amp;quot;&amp;gt;Redirected stderr&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I checked the original stderr and It&amp;#x27;s normal. But quickly I noticed that the rust program&amp;#x27;s stderr was been redirected to another process&amp;#x27;s input.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now the problem seems to be clear:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;The process which redireced Rust&amp;#x27;s program&amp;#x27;s stderr exits, then &amp;lt;code&amp;gt;eprintln!&amp;lt;&amp;#x2F;code&amp;gt; writes to broken pipe and panic!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;But why? Why still write to stderr when something is broken?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;bash-launched-bash&amp;quot;&amp;gt;Bash launched bash&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I noticed that the launch shell did not directly &amp;lt;code&amp;gt;exec&amp;lt;&amp;#x2F;code&amp;gt; Rust program.
In stead, it call bash on another bash script which &amp;lt;code&amp;gt;exec&amp;lt;&amp;#x2F;code&amp;gt; the real program.
For a minimal example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;# launch.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;bash&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; run.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;# run.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;exec&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; program
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;When we run the &amp;lt;code&amp;gt;launch.sh&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;bash&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; launch.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We create 2 processed: &amp;lt;code&amp;gt;bash lanuch.sh&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;program&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;It seems still fine. But if you try to &amp;lt;code&amp;gt;kill&amp;lt;&amp;#x2F;code&amp;gt; the bash process, you can observe that, although the &amp;lt;code&amp;gt;bash&amp;lt;&amp;#x2F;code&amp;gt; process is killed, the &amp;lt;code&amp;gt;program&amp;lt;&amp;#x2F;code&amp;gt; process is still alive!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;BASH SWALLOWS SIGNALS!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Now we completely unravel the reason:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;When the pod try to exit and kill process, it failed to kill the real process and leave it writing to broken pipes which leads to panic and coredumps.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Rusty docker setting</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;rusty-docker-setting&#x2F;"/>
                <updated>2024-10-26T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;rusty-docker-setting&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Recently I&amp;#x27;m learning debugging and profiling tools of &amp;lt;em&amp;gt;Rust&amp;lt;&amp;#x2F;em&amp;gt; on &amp;lt;em&amp;gt;Linux&amp;lt;&amp;#x2F;em&amp;gt;.
I utilize docker to build a debian container and install various kinds of tools(e.g., LLDB, perf).
However, to use LLDB in docker container, there&amp;#x27;re some notices which one may need to care.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lldb-python3-lib-path-problem&amp;quot;&amp;gt;LLDB python3 lib path problem&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I install LLDB ion the official Rust image via:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;apt-get&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; install lldb python3-lldb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;But when I typed &amp;lt;code&amp;gt;rust-lldb&amp;lt;&amp;#x2F;code&amp;gt;, I encountered the following error messages:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;ModuleNotFoundError: No module named ‘lldb.embedded_interpreter’ · Issue #55575 · llvm&amp;#x2F;llvm-project;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After quite some googling, I found this script useful:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;ln -s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; &amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;llvm-14&amp;#x2F;lib&amp;#x2F;python3.11&amp;#x2F;dist-packages&amp;#x2F;lldb&amp;#x2F;* &amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;python3&amp;#x2F;dist-packages&amp;#x2F;lldb&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Still, the version of python may vary on different lldb versions. Replace the actual version number if necessary.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;container-addtional-options&amp;quot;&amp;gt;Container addtional options&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When I thought &amp;quot;I have fixed the python3 problem and here we go!&amp;quot;, another problem arises.
I just cannot use LLDB commands!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;It turns out that I have to include some addtional options to enable debugging:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;docker&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; run&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt; -dit --cap-add&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;=SYS_PTRACE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt; --security-opt&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; seccomp=unconfined rust
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now LLDB is ready for debugging rust programs!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>基于「修饰」和「省略」的轻量级英语语法系统</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;light-weight-english-syntax&#x2F;"/>
                <updated>2024-09-19T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;light-weight-english-syntax&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;对于单纯的语言使用者而言，一门自然语言的语法其实并不是很重要，只有语言学者才会在意并尝试进行系统化。
但是在缺失语言环境的条件下，我们不得不了解语法来帮助我们快速联系并建立直觉和语感。
传统的英语语法往往会分门别类，对许多细节的严谨性也会导致最终总结的规则较为复杂；我认为其实自然语言并非类似数学或者编程语言那样的形式化语言，自然语言更接近一种符合直觉的，便于沟通而不断迭代演进的结果。因而我想阐述一种非常简化的基于「修饰」和「省略」系统的语法系统，帮助自己快速抓住英语语法中的直觉和思维习惯。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;本文会慢慢完善和补全，目前只是大概整理下思路；记住语法只是学习语言的脚手架，在熟练之后就不应该继续依赖语法来表达和理解了。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;xiu-shi&amp;quot;&amp;gt;修饰&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Golang那令人无语的类型后置语法正是英语语法的核心缩影。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;传统语法倾向于至少将英语句式分为四种：主谓宾、主系表、主谓宾宾和主谓宾补。我认为其实只需要前两种就够了，后两种只是从句省略之后的结果。
由于从句省略会在后文集中阐述，这里我们简单记住英语主要有两种句式就可以了：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;结构&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;解释&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;S + V + O&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;主谓宾&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;S + V + C&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;主系表（补语）&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;其中，主谓宾中的宾语可能省略，因为动词本身就足够表达含义了。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;以上是传统语法的一种解说，在这里我提出一种更为简洁且符合直觉的一种形式：「修饰」。
其实以上所有的句式都只是&amp;lt;strong&amp;gt;一种&amp;lt;&amp;#x2F;strong&amp;gt;结构，即「主谓」：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;结构&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;解释&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;S + P&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;主谓&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;而&amp;quot;V+O&amp;quot;与&amp;quot;V+C&amp;quot;都只是谓语的一种形式。而「谓语」其实可以看作是一种对「主语」的「修饰」，这是一种非常典型的「后置修饰」。
「后置修饰」我认为是英语乃至很多语言的核心，其本质原因在于语言需要一种从前往后的序列化表达，后置的修饰和补充便再自然不过了。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这里我们已经提出了在主语之后增加谓语的一种「后置修饰」，其实还有很多其他类型的后置修饰，这里之所以单独将「主谓」结构重点提出是因为这种修饰由于使用频率非常之高，演变为了句子的基本结构。那么还有哪些「后置修饰」呢？&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;以下参照下图的分表进行详细阐述：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;修饰类型&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;结构&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;前置修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;副词&amp;#x2F;形容词，助动词&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;后置修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;谓语，宾语，副词&amp;#x2F;形容词，介词短语，从句&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;特殊修饰&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;动词变形&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;bin-yu&amp;quot;&amp;gt;宾语&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;从上面的句子基本结构中，我们可以直接发现「主谓宾」的主谓结构暗示了「宾语」可以作为对「谓语动词」的一种修饰！
举个例子，&amp;quot;Tom likes math&amp;quot;这个句子中，&amp;quot;math&amp;quot;作为谓语动词&amp;quot;like&amp;quot;的「后置修饰」，表达喜欢的是数学。这里有可以进一步引申出及物动词与不及物动词，不过我认为这种细节完全可以在积累中获得直觉，无需特别关注。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;fu-ci-hou-zhi&amp;quot;&amp;gt;副词后置&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;现在我们已经有了第一种修饰「谓语动词」的方式即宾语，但是对于动词的修饰不止这一种，如果我们想要补充修饰的并非动词的对象，而是动作本身的一些性质，这时候我们就需要「副词」了。副词的位置其实是十分灵活的，其既可以后置修饰也可以「前置修饰」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;xing-rong-ci-hou-zhi&amp;quot;&amp;gt;形容词后置&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;其实如果我们足够不严谨，可以不用去管一些副词和形容词的区别，但是我们还是尽可能保守一些，将形容词后置这种形式也单独列出，比如：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Someone else is watching TV.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;这里的&amp;quot;else&amp;quot;作为&amp;quot;someone&amp;quot;的后置修饰，其是一个形容词。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;jie-ci-duan-yu&amp;quot;&amp;gt;介词短语&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;接下来是一位重量级选手！上面我们针对名词和动词都分别有了两种「后置修饰」的方式，而「介词短语」两者都可以修饰！
还记得上学的时候老师总是让我们记忆一些「动词固定搭配」，其实这些很多就是将「介词」或「介词短语」作为动词的后置修饰所表现出的结果。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;除了「后置修饰」，我们其实也有「前置修饰」，前置修饰往往比后置修饰联系更为强烈，语气更为突出，结构更为常用。我认为可以粗略分为「形容词前置」、「助动词」和「副词前置」。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;xing-rong-ci-fu-ci-qian-zhi&amp;quot;&amp;gt;形容词&amp;#x2F;副词 前置&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;这里我们把形容词前置和副词前置放在一起。形容词前置往往表达一种和修饰对象联系更为紧密更为本质的修饰（更符合汉语的习惯），副词前置很多情况下是为了语气的强调。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;dong-ci-bian-xing&amp;quot;&amp;gt;动词变形&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;在进入助动词之前，我们还需要了解一种特殊的，不规则的修饰，即「动词变形」。
英语与汉语相比，有几个不一样的地方：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;需要专门指定量词，比如&amp;lt;em&amp;gt;one&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;a&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;the&amp;lt;&amp;#x2F;em&amp;gt;, 以及动词后加&amp;lt;code&amp;gt;s&amp;lt;&amp;#x2F;code&amp;gt;。&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;需要将动词变形俩表达时间、语气、可能性等额外的信息。&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;对人称的表示存在宾格，人称会随出现的位置而变形。&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;这里最重要的是第二点，这一点引出了英语语法的无数表达方式，即&amp;lt;strong&amp;gt;动状词&amp;lt;&amp;#x2F;strong&amp;gt;（动词变形）。
作为谓语的动词部分，会由于不同使用的情景发生变化（单复数、时间、状态、语气、不确定性，etc）。
举个例子：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;All men are created equal.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;传统的英语语法大概会告诉我们：&amp;lt;code&amp;gt;are created&amp;lt;&amp;#x2F;code&amp;gt;作为谓语存在。另外我们还发现&amp;lt;code&amp;gt;create&amp;lt;&amp;#x2F;code&amp;gt;这个词变成了过去分词，配合be动词来表达被动的含义。
这种动词的变化就是一种动词变形。这里我觉得其实将句型看作S+V+C更好一些，&amp;lt;code&amp;gt;created&amp;lt;&amp;#x2F;code&amp;gt;是动词变形然后变成了一种形容词，有被动的含义。
这类动词变形主要包括：过去分词、现在分词、单复数。其中现在分词和动名词很像，只不过动名词可以当作名词或名词短语使用。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;类型&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;形式&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;例子&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;过去式&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;v+ed, 不规则&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;ate, wrote&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;复数式&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;v+s, 特殊词尾变化+s&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;works, studies&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;分词&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;v+ed, v+ing, 不规则&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;eaten, done, working&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;动名词&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;v+ing&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;drinking&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;上表整理了所有常见的动词变形类型。其中，前两种变形之后仍然用作动词，而「分词」可用作&amp;lt;em&amp;gt;形容词&amp;lt;&amp;#x2F;em&amp;gt;或者动词的一部分，「动名词」则主要用于&amp;lt;em&amp;gt;名词&amp;lt;&amp;#x2F;em&amp;gt;。
分词是最需要关注和详细分辨的，很多时候分词直接当成了形容词，但是当处于助动词之后的时候就只是谓语动词的一部分。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;zhu-dong-ci&amp;quot;&amp;gt;助动词&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;除了动词本身的变化，经常我们还会发现动词可能和其它词一起构成谓语，比如&amp;lt;code&amp;gt;be&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;have&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;will&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;can&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;could&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;to&amp;lt;&amp;#x2F;code&amp;gt;。
这类词中，一些词用来表示不确定的语气：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;He may be wrong.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;这里be动词前面使用了助动词&amp;lt;code&amp;gt;may&amp;lt;&amp;#x2F;code&amp;gt;来表达不确定的语气，此外，&amp;lt;code&amp;gt;could&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;might&amp;lt;&amp;#x2F;code&amp;gt;等也有不确定的语气。
而&amp;lt;code&amp;gt;will&amp;lt;&amp;#x2F;code&amp;gt;则是主要用于表示某种意愿和未来的事情（比如用在将来时态中），
&amp;lt;code&amp;gt;have&amp;lt;&amp;#x2F;code&amp;gt;用于过去完成时表示&amp;lt;em&amp;gt;已经完成&amp;lt;&amp;#x2F;em&amp;gt;的含义，不定式&amp;lt;code&amp;gt;to do&amp;lt;&amp;#x2F;code&amp;gt;其实可以看作带有助动词的从句省略（后文进一步阐述）。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;cong-ju&amp;quot;&amp;gt;从句&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;现在我们有了基本句式、动词变形以及助动词补足语气，接下来让我们开启任何语言都十分重要的部分：&amp;lt;strong&amp;gt;组合&amp;lt;&amp;#x2F;strong&amp;gt;。
有了句子，自然会考虑如何将小句子组合成更大的句子，在编程语言中，我们有组合子；在英语中，我们有从句。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;其实「从句」也属于「后置修饰」！之所以放在最后一种修饰里，因为它是相对而言最丰富最复杂最重要的一种修饰！从句是后续进行「省略规则」的基础。
传统语法喜欢将从句进行分类：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;名词从句&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;副词从句&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;关系从句&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;这种分类是ok的，我们就按照这个分类进行讨论。考虑这样两个句子：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;He said something.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;He is a programmer.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;如果他说的内容就是第二句，即他想告诉我们他是个程序员，那么我们可以使用从句将这两句组合起来：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;He said that he is a programmer.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;副词从句经常使用&amp;lt;code&amp;gt;when&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;where&amp;lt;&amp;#x2F;code&amp;gt;等表达时间、地点等额外的信息修饰句子。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;sheng-lue&amp;quot;&amp;gt;省略&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;自然语言往往会为了追求便捷性进行句子省略，同时显现出某种「言外之意」。
有趣的是，许许多多复杂的英语语法可以被归纳为从句省略：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;不定式是从句中有助动词时的一种省略&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;主谓宾补是从句为SVC结构时的一种省略&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;同位语也是SVC的一种省略表达&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;省略的原则十分简单：&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;省略从句中主语与 be 动词，只保留补语部分。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;input disabled=&amp;quot;&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;#x2F;&amp;gt;
TODO 完善补充例子&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Inside Tokio&#x27;s task_local!</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;inside-tokio-s-task-local&#x2F;"/>
                <updated>2024-09-01T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;inside-tokio-s-task-local&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Recently I&amp;#x27;m curious about Tokio runtime&amp;#x27;s &amp;lt;code&amp;gt;task_local&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;LocalKey&amp;lt;&amp;#x2F;code&amp;gt;.
How can this macro ensure task-level global variable?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;task-local-is-based-on-thread-local&amp;quot;&amp;gt;&amp;lt;code&amp;gt;task_local!&amp;lt;&amp;#x2F;code&amp;gt; is based on &amp;lt;code&amp;gt;thread_local!&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s unravel &amp;lt;code&amp;gt;task_local&amp;lt;&amp;#x2F;code&amp;gt; the macro&amp;#x27;s definition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span&amp;gt;#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;macro_export&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cfg_attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(docsrs, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;doc&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cfg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(feature = &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;rt&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;)))]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;macro_rules! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;task_local {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; empty (base case for the recursion)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    () =&amp;amp;gt; {};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ($(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;meta&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])* $vis:vis static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ident&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;; $(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$rest&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;tt&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)*) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$crate&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;::__task_local_inner!($(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$vis $name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$crate&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;::task_local!($(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$rest&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)*);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ($(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;meta&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])* $vis:vis static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ident&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$crate&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;::__task_local_inner!($(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$vis $name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;doc&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(hidden)]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;macro_export&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;macro_rules! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;__task_local_inner {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ($(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;meta&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])* $vis:vis &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ident&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;ty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        $(#[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$attr&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;])*
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$vis &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$crate&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;::task::LocalKey&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt; = {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            std::thread_local! {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;__KEY&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: std::cell::RefCell&amp;amp;lt;Option&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;&amp;amp;gt; = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;const &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{ std::cell::RefCell::new(None) };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;$crate&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;::task::LocalKey { inner: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;__KEY &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;where we can clearly conclude that &amp;lt;code&amp;gt;task_local!&amp;lt;&amp;#x2F;code&amp;gt; is based on &amp;lt;code&amp;gt;thread_local!&amp;lt;&amp;#x2F;code&amp;gt;.
However, threads are reused by multiple different tasks asynchronously.
If task 1 yields, the thread may be scheduled to another task 2.
When task 1 is ready to run again, it may select another thread 2 to poll.
Therefore, &amp;lt;code&amp;gt;thread_local&amp;lt;&amp;#x2F;code&amp;gt; values may be overwritten or lost.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;swap&amp;quot;&amp;gt;Swap!&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;So, how does &amp;lt;code&amp;gt;task_local&amp;lt;&amp;#x2F;code&amp;gt; ensure thread_local values not be overwritten or lost?
The secret is under the implementation of &amp;lt;code&amp;gt;Future&amp;lt;&amp;#x2F;code&amp;gt; for &amp;lt;code&amp;gt;task::LocalKey&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s wrapper.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Firstly, to use a LocalKey, one need to &amp;lt;code&amp;gt;scope&amp;lt;&amp;#x2F;code&amp;gt; it and produce a &amp;lt;code&amp;gt;TaskLocalFuture&amp;amp;lt;T, F&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;
which binds &amp;lt;code&amp;gt;T&amp;lt;&amp;#x2F;code&amp;gt; and the corresponding task&amp;#x27;s future &amp;lt;code&amp;gt;F&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;T&amp;amp;gt; LocalKey&amp;amp;lt;T&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;pub fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;scope&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;F&amp;amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;value&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: T, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: F) -&amp;amp;gt; TaskLocalFuture&amp;amp;lt;T, F&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;where
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        F: Future,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        TaskLocalFuture {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            local: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            slot: Some(value),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            future: Some(f),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            _pinned: PhantomPinned,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;scope_inner&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;F, R&amp;amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;slot&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Option&amp;amp;lt;T&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: F) -&amp;amp;gt; Result&amp;amp;lt;R, ScopeInnerErr&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;where
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        F: FnOnce() -&amp;amp;gt; R,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Guard&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, T: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;local&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;LocalKey&amp;amp;lt;T&amp;amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;slot&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Option&amp;amp;lt;T&amp;amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, T: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt; Drop &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Guard&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, T&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;drop&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; This should not panic.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; We know that the RefCell was not borrowed before the call to
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; `scope_inner`, so the only way for this to panic is if the
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; closure has created but not destroyed a RefCell guard.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; However, we never give user-code access to the guards, so
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; there&amp;amp;#39;s no way for user-code to forget to destroy a guard.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; The call to `with` also should not panic, since the
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; thread-local wasn&amp;amp;#39;t destroyed when we first called
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; `scope_inner`, and it shouldn&amp;amp;#39;t have gotten destroyed since
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; then.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.local.inner.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;with&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;inner&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; ref_mut = inner.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;borrow_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    mem::swap(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.slot, &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;*ref_mut);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                });
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.inner.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;try_with&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;inner&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            inner
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                .&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;try_borrow_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                .&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;map&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;ref_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;| mem::swap(slot, &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;*ref_mut))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        })??;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; guard = Guard { local: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, slot };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;drop&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(guard);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        Ok(res)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The value &amp;lt;code&amp;gt;T&amp;lt;&amp;#x2F;code&amp;gt; is initialized when polled the first time.
The future impl is as follows:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;impl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;T: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;static&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, F: Future&amp;amp;gt; Future &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;TaskLocalFuture&amp;amp;lt;T, F&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Output = F::Output;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    #[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;track_caller&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;poll&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: Pin&amp;amp;lt;&amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut Self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;cx&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;mut &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Context&amp;amp;lt;&amp;amp;#39;_&amp;amp;gt;) -&amp;amp;gt; Poll&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Output&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; this = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;project&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; future_opt = this.future;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res = this
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            .local
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            .&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;scope_inner&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(this.slot, || &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; future_opt.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;as_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;().&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;as_pin_mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                Some(fut) =&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res = fut.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;poll&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(cx);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;is_ready&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                        future_opt.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;set&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(None);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                    Some(res)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                None =&amp;amp;gt; None,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            });
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;match&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; res {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            Ok(Some(res)) =&amp;amp;gt; res,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            Ok(None) =&amp;amp;gt; panic!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;`TaskLocalFuture` polled after completion&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            Err(err) =&amp;amp;gt; err.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;panic&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Whenever the future is used to poll again, it just &amp;lt;em&amp;gt;SWAP&amp;lt;&amp;#x2F;em&amp;gt; the global &amp;lt;code&amp;gt;thread_local&amp;lt;&amp;#x2F;code&amp;gt; slot and the value inside &amp;lt;code&amp;gt;TaskLocalFuture&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;em&amp;gt;SWAP&amp;lt;&amp;#x2F;em&amp;gt; back when finished.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;As easy as pie ;)&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Another view of Rust&#x27;s lifetime</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;another-view-of-rusts-lifetime&#x2F;"/>
                <updated>2024-08-11T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;another-view-of-rusts-lifetime&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Compared with &amp;lt;em&amp;gt;Haskell&amp;lt;&amp;#x2F;em&amp;gt;, Rust is different for its effect system and ownership system.
Inside ownership system, lifetime plays an important role on borrowing and safety.
Traditionally, people think about lifetime as some region of code, which is a little kind of vague.
Why not try to see lifetime as a kind of memory(dependency) reference?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lifetime-as-scope&amp;quot;&amp;gt;Lifetime as scope?&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;The Rust book&amp;lt;&amp;#x2F;em&amp;gt; suggests viewing lifetime as scopes. Consider a simple example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;main&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; r;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; ---------+-- &amp;amp;#39;a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                          &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {                     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; x = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -+-- &amp;amp;#39;b  |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        r = &amp;amp;amp;x;           &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;  |       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }                     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -+       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                          &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    println!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;r: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;{r}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;);   &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}                         &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; ---------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Since &amp;lt;code&amp;gt;x&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s lifetime &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt; is shorter than &amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt;, we cannot assign &amp;lt;code&amp;gt;&amp;amp;amp;x&amp;lt;&amp;#x2F;code&amp;gt; to &amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt;.
However, this reason is rather imprecise.
If we simply remove the last &amp;lt;code&amp;gt;println!&amp;lt;&amp;#x2F;code&amp;gt; line, this code just compile fine.:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;main&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; r;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; ---------+-- &amp;amp;#39;a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                          &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {                     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;          |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; x = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -+-- &amp;amp;#39;b  |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        r = &amp;amp;amp;x;           &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;  |       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }                     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -+       |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}                         &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; ---------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Why?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Even worse, lifetime can contain &amp;lt;em&amp;gt;holes&amp;lt;&amp;#x2F;em&amp;gt;, where it’s intermittently invalid between where it starts and where it ultimately ends. For example, let&amp;#x27;s change our previous code simply:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;main&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;42&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let mut&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; r;                
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; x = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;        
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        r = &amp;amp;amp;x;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -------------+-- &amp;amp;#39;r
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                           &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;              |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }                      &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    r = &amp;amp;amp;i;                &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -------------+-- &amp;amp;#39;r
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    println!(&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;r: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;{}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, *r); &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;              |
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}                          &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; -------------+
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This time the code compiles. Surprise!
Why? why this code compiles fine?? If r&amp;#x27;s lifetime coprresponds to &amp;lt;code&amp;gt;x&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s reference, why &amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt; can br printed outside &amp;lt;code&amp;gt;x&amp;lt;&amp;#x2F;code&amp;gt;&amp;#x27;s scope now? There may exist holes in lifetime.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Apparently &amp;lt;em&amp;gt;scope&amp;lt;&amp;#x2F;em&amp;gt; view is not correct. We need something better.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lifetime-as-regions-of-code&amp;quot;&amp;gt;Lifetime as regions of code?&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Rustonomicon&amp;lt;&amp;#x2F;em&amp;gt; the book suggests viewing lifetime as named regions of code.
Now our previous problems are solved, since &amp;lt;code&amp;gt;&amp;#x27;r&amp;lt;&amp;#x2F;code&amp;gt; spans only its valid data flow regions and the regions can contains arbitrary holes.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Lifetime is named regions of code where the pointed data is valid.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;What about lifetime constraints like &amp;lt;code&amp;gt;&amp;#x27;a: &amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt;?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lifetime-subtyping&amp;quot;&amp;gt;Lifetime subtyping&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Subtyping is really just a spectial relation just as other &amp;lt;em&amp;gt;trait&amp;lt;&amp;#x2F;em&amp;gt;s can represent.
The only subtyping in rust is lifetime subtyping.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;if &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt; outlives &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt;, then &amp;lt;code&amp;gt;&amp;#x27;b: &amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;b T&amp;lt;&amp;#x2F;code&amp;gt; is a subtype of &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;a T&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;Since &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;b T&amp;lt;&amp;#x2F;code&amp;gt; is a subtype of &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;a T&amp;lt;&amp;#x2F;code&amp;gt;, we can assign any &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;b T&amp;lt;&amp;#x2F;code&amp;gt; to &amp;lt;code&amp;gt;&amp;amp;amp;&amp;#x27;a T&amp;lt;&amp;#x2F;code&amp;gt;.
For example(again from &amp;lt;em&amp;gt;the rust book&amp;lt;&amp;#x2F;em&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;s1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;s2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a str &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; s1.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() &amp;amp;gt; s2.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        s1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        s2
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Actually, this code cannot compile without lifetime subtyping. It&amp;#x27;s equivalent to this code:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;s1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;s2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c str 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;where
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;&amp;amp;#39;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; s1.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() &amp;amp;gt; s2.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        s1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    } &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;else &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        s2
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Automatic subtyping is only a fancy and convenient way to expression this relationship.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lifetime-as-memory-references&amp;quot;&amp;gt;Lifetime as memory references&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;If you know &amp;lt;em&amp;gt;category theory&amp;lt;&amp;#x2F;em&amp;gt;, you may heard of &amp;lt;em&amp;gt;duality&amp;lt;&amp;#x2F;em&amp;gt;.
Just like &amp;lt;em&amp;gt;category theory&amp;lt;&amp;#x2F;em&amp;gt;, the code region view also has its &amp;lt;em&amp;gt;DUAL&amp;lt;&amp;#x2F;em&amp;gt; view:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;A lifetime refers to some memory or other resources and
constraint &amp;lt;code&amp;gt;&amp;#x27;a: &amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt; can also be read &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; refers to a subset of &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt; or, if you like, &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; in &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;In this dual view, if &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; outlives &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;&amp;#x27;b&amp;lt;&amp;#x2F;code&amp;gt; contains more resources than &amp;lt;code&amp;gt;&amp;#x27;a&amp;lt;&amp;#x2F;code&amp;gt; does.
I find this view is somehow complement to the region view.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s demonstrate this view with the following code:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;use_longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;str &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;;     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; &amp;amp;#39;a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; b: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;str &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;;     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; &amp;amp;#39;b
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; c: &amp;amp;amp;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;str &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;c&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;;     &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; &amp;amp;#39;c
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; d = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(a, b);  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; &amp;amp;#39;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;let&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; d = &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#96b5b4;&amp;quot;&amp;gt;longer&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(c, d);  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; &amp;amp;#39;e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;e -&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;#39;d -&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;#39;a,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;#39;b,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;#39;c,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;where arrow &amp;lt;code&amp;gt;-&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; means point to some resource and &amp;lt;code&amp;gt;{}&amp;lt;&amp;#x2F;code&amp;gt; means union.
From this graph, we can easily conclude:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;a: &amp;amp;#39;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;b: &amp;amp;#39;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;d: &amp;amp;#39;e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;c: &amp;amp;#39;e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;a: &amp;amp;#39;e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;#39;b: &amp;amp;#39;e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Golang does have sum types, however...</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;golang-does-have-sum-types-however&#x2F;"/>
                <updated>2024-08-11T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;golang-does-have-sum-types-however&#x2F;</id>
                <content type="html">&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Golang has no sum type!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;People like to say that golang lacks &amp;lt;em&amp;gt;sum types&amp;lt;&amp;#x2F;em&amp;gt;.
For example, in Rust we can write a simple &amp;lt;code&amp;gt;Result&amp;lt;&amp;#x2F;code&amp;gt; type:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Result&amp;amp;lt;T, E&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Ok(T),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Err(E),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Here &amp;lt;code&amp;gt;Result&amp;lt;&amp;#x2F;code&amp;gt; is a sum type which can only be one variant(&amp;lt;code&amp;gt;Ok&amp;lt;&amp;#x2F;code&amp;gt; or &amp;lt;code&amp;gt;Err&amp;lt;&amp;#x2F;code&amp;gt;) but not both.
Sum types are really useful to constraint values. In category theory, sum type is dual to product type, which is a universal type. If product types can be written as &amp;lt;code&amp;gt;a * b&amp;lt;&amp;#x2F;code&amp;gt;, then sum types can be written as &amp;lt;code&amp;gt;a + b&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Golang lacks direct support on sum types, but we can still simulate it:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;go&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-go &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-go&amp;quot; data-lang=&amp;quot;go&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;result[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E any&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;interface &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;isResult&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Result[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E any&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;inner &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Ok[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E any&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;value &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;T
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Err[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E any&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;struct &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;err &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;E
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;func &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;Ok&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;isResult&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;func &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;Err&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;isResult&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() {}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;func &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;res &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;Switch&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;() &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;] {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;res&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;inner
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;To match variants:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;go&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-go &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-go&amp;quot; data-lang=&amp;quot;go&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;func &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;matching&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E any&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;](&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;res Result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;switch &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;r &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;res&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;Switch&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;().(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;case &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;Ok&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;_ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;r&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;value
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;case &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;Err&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;T&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;E&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;default&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;However, since golang doest not have generic methods, its function is still limited(golang team is far too conservative)...&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Although we can simulate &amp;lt;code&amp;gt;Result&amp;lt;&amp;#x2F;code&amp;gt; sum type in Golang, we are still forced to use (T, error) and write &amp;lt;code&amp;gt;if err != nil&amp;lt;&amp;#x2F;code&amp;gt; lol. What a great language!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>My programming key bindings</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;my-programming-key-bindings&#x2F;"/>
                <updated>2024-08-10T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;my-programming-key-bindings&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I like the idea of editing of &amp;lt;em&amp;gt;VIM&amp;lt;&amp;#x2F;em&amp;gt;, but I still think this is not the best.
Some keys of &amp;lt;em&amp;gt;vscode&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;emacs&amp;lt;&amp;#x2F;em&amp;gt; and particularly &amp;lt;em&amp;gt;Kakoune&amp;lt;&amp;#x2F;em&amp;gt; ans &amp;lt;em&amp;gt;helix&amp;lt;&amp;#x2F;em&amp;gt; are modern.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;general-idea&amp;quot;&amp;gt;General idea&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Action follows selection.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;major-modes&amp;quot;&amp;gt;Major modes&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#normal-mode&amp;quot;&amp;gt;Normal&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#insert-mode&amp;quot;&amp;gt;Insert&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#picker-mode&amp;quot;&amp;gt;Picker&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#prompt-mode&amp;quot;&amp;gt;Prompt&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#popup-mode&amp;quot;&amp;gt;Popup&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;minor-modes&amp;quot;&amp;gt;Minor modes&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#view-mode&amp;quot;&amp;gt;View&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#select-mode&amp;quot;&amp;gt;Select&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#goto-mode&amp;quot;&amp;gt;Goto&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#match-mode&amp;quot;&amp;gt;Match&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#window-mode&amp;quot;&amp;gt;Window&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#space-mode&amp;quot;&amp;gt;Space&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;noteoverflow.github.io&amp;#x2F;posts&amp;#x2F;my-programming-key-bindings&amp;#x2F;#unimpaired&amp;quot;&amp;gt;Unimpaired&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;keys&amp;quot;&amp;gt;Keys&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;normal-mode&amp;quot;&amp;gt;Normal mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;h4 id=&amp;quot;movement&amp;quot;&amp;gt;Movement&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;h&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Left&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move left&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;j&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Down&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;k&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Up&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;l&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Right&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move right&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;w&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move next word start&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;b&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move previous word start&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;e&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move next word end&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Find next char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;t&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Find &amp;#x27;till next char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;F&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Find previous char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;T&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Find &amp;#x27;till previous char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-b, PageUp&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move page up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-f, PageDown&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move page down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move cursor and page half page up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move cursor and page half page down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;0&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Jump to the start of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;^&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move to the first non-blank character of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;$&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move cursor line end&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;G&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the last line of the document&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-o&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl--&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go previous cursor location&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-i&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go next cursor location&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h4 id=&amp;quot;changes&amp;quot;&amp;gt;Changes&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Replace with a character&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;R&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Replace with yanked text&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;~&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Switch case of the selected text&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;i&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Insert before selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Insert after selection (append)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;I&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Insert at the start of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;A&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Insert at the end of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;o&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open new line below selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;O&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open new line above selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Undo change&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;U&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Redo change&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;y&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Yank selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;p&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Paste after selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;P&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Paste before selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;&amp;quot;&amp;amp;lt;reg&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select a register to yank to or paste from&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Indent selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Unindent selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;=&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Format selection (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Change selection (delete and enter insert mode)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Q&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Start&amp;#x2F;stop macro recording to the selected register&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;q&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Play back a recorded macro from the selected register&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-Up&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move line upward&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-Down&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move line downward&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h4 id=&amp;quot;selection&amp;quot;&amp;gt;Selection&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;s&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select all regex matches inside selections&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;C&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Copy selection onto the next line (Add cursor below)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;,&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Keep only the primary selection&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Cmd-a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select entire file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;x&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select current line, if already selected, extend to next line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h4 id=&amp;quot;searching&amp;quot;&amp;gt;Searching&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Search for regex pattern&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;?&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Search for previous pattern&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;n&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select next search match&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;N&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select previous search match&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;*&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Use current selection as the search pattern&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h4 id=&amp;quot;file&amp;quot;&amp;gt;File&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Cmd-s&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Save current file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Cmd-n&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open new buffer&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;insert-mode&amp;quot;&amp;gt;Insert mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;i&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Escape&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Switch to normal mode&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Goto line begin&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-e&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Goto line end&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Delete&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete next char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-j&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Enter&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Insert new line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-x&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Autocomplete&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-Delete&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete word backward&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete to start of line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-k&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete to end of line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;picker-mode&amp;quot;&amp;gt;Picker mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Shift-Tab&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Up&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-p&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Previous entry&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Tab&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Down&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-n&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Next entry&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;PageUp&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Page up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;PageDown&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Page down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Home&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to first entry&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;End&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to last entry&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Enter&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open selected&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Escape&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Close picker&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;prompt-mode&amp;quot;&amp;gt;Prompt mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Escape&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Close prompt&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-b&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-Left&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Backward a word&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-f&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Right&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Forward a char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-b&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Left&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Backward a char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-f&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-Right&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Forward a word&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-e&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;End&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move prompt end&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-a&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Home&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move prompt start&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-w&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Alt-Backspace&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-Backspace&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete previous word&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Alt-d&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Alt-Delete&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-Delete&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete next word&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete to start of line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-k&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete to end of line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Backspace&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-h&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Shift-Backspace&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete previous char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Delete&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete next char&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-p&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Up&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select previous history&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-n&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Down&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select next history&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Tab&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select next completion item&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Enter&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open selected&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;popup-mode&amp;quot;&amp;gt;Popup mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Scroll up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Scroll down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;view-mode&amp;quot;&amp;gt;View mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;z&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;z&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Vertically center the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;t&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Align the line to the top of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;b&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Align the line to the bottom of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;m&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;z&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Align the line to the middle of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;j&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;down&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Scroll the view downwards&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;k&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;up&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Scroll the view upwards&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-f&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;PageDown&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move page down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-b&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;PageUp&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move page up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-u&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move cursor and page half page up&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;Ctrl-d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move cursor and page half page down&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;select-mode&amp;quot;&amp;gt;Select mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;v&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Cancel selected region&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;goto-mode&amp;quot;&amp;gt;Goto mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;g&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;g&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to line number &amp;lt;n&amp;gt; else start of file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;e&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the end of the file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to files in the selections&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;h&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the start of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;l&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the end of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;s&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to first non-whitespace character of the line&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;t&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the top of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the middle of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;b&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the bottom of the screen&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to definition (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;y&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to type definition (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to references (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;i&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to implementation (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the last accessed&amp;#x2F;alternate file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;m&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to the last modified&amp;#x2F;alternate file&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;n&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next buffer&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;p&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous buffer&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;w&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Show labels at each word and select the word that belongs to the entered labels&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;match-mode&amp;quot;&amp;gt;Match mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;m&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;m&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Goto matching bracket&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;s &amp;amp;lt;char&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Surround current selection with &amp;lt;char&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;r &amp;amp;lt;from&amp;amp;gt;&amp;amp;lt;to&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Replace surround character &amp;lt;from&amp;gt; with &amp;lt;to&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;d &amp;amp;lt;char&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Delete surround character &amp;lt;char&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;a &amp;amp;lt;object&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select around textobject&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;i &amp;amp;lt;object&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select inside textobject&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;window-mode&amp;quot;&amp;gt;Window mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;Ctrl-w&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;w&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-w&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Switch to next window&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;v&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-v&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Vertical right split&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;s&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-s&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Horizontal bottom split&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to files in the selections in horizontal splits&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;F&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to files in the selections in vertical splits&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;h&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-h&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Left&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move to left split&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;j&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-j&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Down&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move to split below&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;k&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-k&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Up&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move to split above&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;l&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-l&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Right&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Move to right split&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;q&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-q&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Close current window&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;o&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Ctrl-o&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Only keep the current window, closing all the others&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;H&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Swap window to the left&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;J&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Swap window downwards&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;K&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Swap window upwards&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;L&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Swap window to the right&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;space-mode&amp;quot;&amp;gt;Space mode&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Press &amp;lt;code&amp;gt;Space&amp;lt;&amp;#x2F;code&amp;gt; in normal mode&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open file picker&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;F&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open file picker at current working directory&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;b&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open buffer picker&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;j&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open jumplist picker&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;k&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Show documentation for item under cursor in a popup (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;s&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open document symbol picker (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;S&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open workspace symbol picker (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open document diagnostics picker (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;D&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open workspace diagnostics picker (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;r&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Rename symbol (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Apply code action (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;h&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Select symbol references (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Comment&amp;#x2F;uncomment selections&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Global search in workspace folder&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;?&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Open command palette&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h3 id=&amp;quot;unimpaired&amp;quot;&amp;gt;Unimpaired&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;Desc.&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next diagnostic (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[d&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous diagnostic (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]D&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to last diagnostic in document (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[D&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to first diagnostic in document (LSP)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next function (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[f&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous function (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]t&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next type definition (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[t&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous type definition (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next argument&amp;#x2F;parameter (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[a&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous argument&amp;#x2F;parameter (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next comment (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[c&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous comment (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]T&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next test (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[T&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous test (TS)&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;]p&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to next paragraph&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;[p&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;Go to previous paragraph&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h2 id=&amp;quot;editors&amp;quot;&amp;gt;Editors&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I current use &amp;lt;em&amp;gt;vscode&amp;lt;&amp;#x2F;em&amp;gt; for its light-weight and extensions.
I use the extension &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;marketplace.visualstudio.com&amp;#x2F;items?itemName=silverquark.dancehelix&amp;quot;&amp;gt;Dance - Helix Alpha&amp;lt;&amp;#x2F;a&amp;gt; and &amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;marketplace.visualstudio.com&amp;#x2F;items?itemName=shadowndacorner.vscode-easymotion&amp;quot;&amp;gt;EasyMotion&amp;lt;&amp;#x2F;a&amp;gt; to simulate Helix&amp;#x27;s key bindings.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Also, I add some key bindings:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;json&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-json &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-json&amp;quot; data-lang=&amp;quot;json&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; Place your key bindings in this file to override the defaultsauto[]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;key&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Escape&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;dance.modes.set.normal&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;when&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editorTextFocus&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;key&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;ctrl+w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vscode-easymotion.jumpToWord&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;when&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editorTextFocus &amp;amp;amp;&amp;amp;amp; dance.mode == &amp;amp;#39;insert&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;key&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editor.action.formatDocument&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;when&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editorTextFocus &amp;amp;amp;&amp;amp;amp; dance.mode == &amp;amp;#39;normal&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;    
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;key&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Ctrl+[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.navigateBack&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;when&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editorTextFocus &amp;amp;amp;&amp;amp;amp; dance.mode == &amp;amp;#39;normal&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;key&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;Ctrl+]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.navigateForward&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;when&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editorTextFocus &amp;amp;amp;&amp;amp;amp; dance.mode == &amp;amp;#39;normal&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;When using Vscode Vim plugin, I include the following settings:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;json&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-json &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-json&amp;quot; data-lang=&amp;quot;json&amp;quot;&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.easymotion&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.incsearch&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.useSystemClipboard&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.useCtrlKeys&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.hlsearch&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.insertModeKeyBindings&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;j&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;j&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;after&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;Esc&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-j&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;cursorDown&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;C-k&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;cursorUp&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;C-h&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;cursorLeft&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-l&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;cursorRight&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.normalModeKeyBindingsNonRecursive&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;d&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;after&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;d&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;d&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-n&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;:nohl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;K&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;lineBreakInsert&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;silent&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.leader&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;space&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.handleKeys&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-a&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;false&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-e&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;false&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;C-f&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;false
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.smartRelativeLine&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;true&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.cursorStylePerMode.insert&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;line-thin&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.cursorStylePerMode.normal&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;block&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;vim.normalModeKeyBindings&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;w&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.switchWindow&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.showAllSymbols&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.quickOpen&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;r&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.openRecent&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot; : [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editor.action.quickFix&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;&amp;amp;lt;leader&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;p&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;workbench.action.showCommands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;g&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;r&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editor.action.goToReferences&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;before&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;g&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;, &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;commands&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;: [
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#a3be8c;&amp;quot;&amp;gt;editor.action.goToImplementation&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            ]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ],
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Golang is terrible as a general purpose language</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;golang-is-terrible&#x2F;"/>
                <updated>2024-08-05T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;golang-is-terrible&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Golang is terrible at several things:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Try to mix up &amp;lt;em&amp;gt;defaults&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;empty value&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;empty slice&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;null pointer&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;optional value&amp;lt;&amp;#x2F;em&amp;gt;.
Function callers have to check all these things to avoid &amp;lt;strong&amp;gt;PANIC&amp;lt;&amp;#x2F;strong&amp;gt;!
Also comparing nil values with poor type inference is really dirty.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Try to mix up sum type and product type.
Golang likes to simulate sum type with product types (e.g., return extra error), which is error-prone for several things:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Cannot ensure exclusive variant. You may receive both a return value and non-nil err.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;You may also try to simulate sum type with interfaces, but interface is implicit and not sealed.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;ol start=&amp;quot;3&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Try to mix up dynamic and compile-time polymorphism.
Many APIs have to use &amp;lt;code&amp;gt;interface{}&amp;lt;&amp;#x2F;code&amp;gt; and methods on receivers cannot have generic parameters.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Try to mix up &amp;lt;em&amp;gt;SHOULD implement&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;HAPPEN TO implement&amp;lt;&amp;#x2F;em&amp;gt;.
Due to poor expressiveness of golang&amp;#x27;s type system, you may happens to implement some interfaces with wrong semantic.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Try to mix up directory hierarchy and module system.
You have to &amp;lt;code&amp;gt;mkdir&amp;lt;&amp;#x2F;code&amp;gt; to create inner modules.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;Golang pros:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Fast development with bugs.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Fast compiling time with little static check.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Polymorphism in Rust</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;polymorphism-in-rust&#x2F;"/>
                <updated>2024-08-05T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;polymorphism-in-rust&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Every language has polymorphism functions. Some utilize dynamic interfaces, some invent generics and typeclass to overload behavories.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Rust has &amp;lt;em&amp;gt;both&amp;lt;&amp;#x2F;em&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In Rust, we have type parameters and traits.
Rust really prefer generics over existential types. If one want to be &amp;lt;code&amp;gt;Debug&amp;lt;&amp;#x2F;code&amp;gt;, just &amp;quot;generic&amp;quot; it:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;use_debug&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;A: fmt::Debug&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;a&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: A);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We also have &amp;lt;em&amp;gt;associated types&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;where clauses&amp;lt;&amp;#x2F;em&amp;gt;, &amp;lt;em&amp;gt;impl types&amp;lt;&amp;#x2F;em&amp;gt;, etc.
These all lift our type to polymorphism. However, there still exists two kinds of polymorphism which are somewhat hard to achieve in Rust now.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;effect-polymorphism&amp;quot;&amp;gt;Effect polymorphism&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;It&amp;#x27;s somewhat hard to explain what effect is because &amp;lt;em&amp;gt;side-effects&amp;lt;&amp;#x2F;em&amp;gt; is nearly everywhere and we can&amp;#x27;t live without it!
Effects are everything except for function input&amp;#x2F;output. Think about errors, asynchrony, uncertainty. Think about it and try to guess what they correspond to in out daily programming.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Yes, they are &amp;lt;code&amp;gt;Result&amp;amp;lt;_&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;Future&amp;amp;lt;Output=_&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; and various kinds of containers. Now suppose you want to write some &amp;lt;code&amp;gt;fn&amp;lt;&amp;#x2F;code&amp;gt; which performs some unknown effect:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;fn &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8fa1b3;&amp;quot;&amp;gt;func&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;F&amp;amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;x&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;i32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) -&amp;amp;gt; F&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;i32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Congratulations! we discovers &amp;lt;em&amp;gt;Higher-Kinded Types(HKT)&amp;lt;&amp;#x2F;em&amp;gt;. But you may also have noticed that this is not enough since &amp;lt;code&amp;gt;Future&amp;lt;&amp;#x2F;code&amp;gt; is a trait and we have no way of abstract traits. Apparently Rust does not like &amp;lt;em&amp;gt;Monads&amp;lt;&amp;#x2F;em&amp;gt;. In Rust, abstracting effects is really really hard right now. If you want to write one API for both sync and async codes, I just suggest you to write two separate traits.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;ownership-polymorphism&amp;quot;&amp;gt;Ownership polymorphism&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Another one is ownership, which is also ubiquitous in Rust.
Suppose you want write some AST like:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Expr {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Var(String),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Call { f: Expr, args: Vec&amp;amp;lt;Expr&amp;amp;gt; },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Lambda { args: Vec&amp;amp;lt;Expr&amp;amp;gt;, body: Expr }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Apparently this does not compile since &amp;lt;code&amp;gt;Expr&amp;lt;&amp;#x2F;code&amp;gt; is not &amp;lt;code&amp;gt;Sized&amp;lt;&amp;#x2F;code&amp;gt;.
We have to add some ownership for every recurrent position. For example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Expr {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Call { f: Box&amp;amp;lt;Expr&amp;amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;*..*&amp;#x2F; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;However, &amp;lt;code&amp;gt;Box&amp;lt;&amp;#x2F;code&amp;gt; has exclusive ownership, what about &amp;lt;code&amp;gt;Rc&amp;lt;&amp;#x2F;code&amp;gt; or even &amp;lt;code&amp;gt;Arc&amp;lt;&amp;#x2F;code&amp;gt;?
You can just abstract the whole recurrent type as:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Expr&amp;amp;lt;This&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Call { f: This, args: Vec&amp;amp;lt;This&amp;amp;gt; }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exprs = Expr&amp;amp;lt;Rc&amp;amp;lt;Expr&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;background-color:#bf616a;color:#2b303b;&amp;quot;&amp;gt;???&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;Expr&amp;lt;&amp;#x2F;code&amp;gt; is a fixpoint! This way we now have infinite type.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;How about just abstract HKT?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;rust&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-rust &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-rust&amp;quot; data-lang=&amp;quot;rust&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;pub trait &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Kind {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;type &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;F&amp;amp;lt;T&amp;amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;enum &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Expr&amp;amp;lt;K: Kind&amp;amp;gt; {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    Call { f: K::F&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;, args: Vec&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;K::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;F&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;Self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt;&amp;amp;gt; },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;HKTs are really useful on abstracting &amp;lt;code&amp;gt;* -&amp;amp;gt; *&amp;lt;&amp;#x2F;code&amp;gt; types!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I believe in the future, we can have effect polymorphism with &amp;lt;code&amp;gt;Coroutine&amp;lt;&amp;#x2F;code&amp;gt; one-shot algebraic effects and ownership polymorphism with &amp;lt;em&amp;gt;GAT&amp;lt;&amp;#x2F;em&amp;gt; and &amp;lt;em&amp;gt;impl type&amp;lt;&amp;#x2F;em&amp;gt; alias.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Relaxed ordering and visibility</title>
                <link href="https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;relaxed-ordering-and-visibility&#x2F;"/>
                <updated>2024-08-05T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;noteoverflow.github.io&#x2F;posts&#x2F;relaxed-ordering-and-visibility&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I&amp;#x27;m really curious that whether the &amp;lt;em&amp;gt;relaxed&amp;lt;&amp;#x2F;em&amp;gt; memory ordering can ensure to see
the last recent value in the total modification order. It appears that the C++ memory model alone is not enough.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The C++ memory model only states that&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Implementations should make atomic stores visible to atomic loads within a reasonable amount of time.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;which means in the code&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;c++&amp;quot; style=&amp;quot;background-color:#2b303b;color:#c0c5ce;&amp;quot; class=&amp;quot;language-c++ &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-c++&amp;quot; data-lang=&amp;quot;c++&amp;quot;&amp;gt;&amp;lt;span&amp;gt;std::atomic&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;g&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; thread 1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;g.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;store&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d08770;&amp;quot;&amp;gt;42&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; thread 2
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; a = g.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;load&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#65737e;&amp;quot;&amp;gt;&amp;#x2F;&amp;#x2F; do stuff with a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b48ead;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; b = g.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#bf616a;&amp;quot;&amp;gt;load&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;if thread 1 has executed the storing, thread 2 is not guaranteed to load 42 immediately.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;However, C++ standard does ensure the visibility of &amp;lt;strong&amp;gt;RMW(Read-Modify-Write)&amp;lt;&amp;#x2F;strong&amp;gt; operations as the standard says:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Atomic read-modify-write operations shall always read the last value (in the modification order) written before the write associated with the read-modify-write operation.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;p&amp;gt;which means you don&amp;#x27;t need to worry about operations like &amp;lt;code&amp;gt;fetch_xx&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;compare_exchange&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
    
</feed>
